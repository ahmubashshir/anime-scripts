#!/bin/bash
# shellcheck disable=SC2034
((def_include)) && return 0 || def_include=1
DEBUG=${DEBUG:-false}
#start:code
USER_AGENT="${USER_AGENT:-Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36}"
CURL_OPTIONS=(
	--compressed
	-H 'authority: ww5.dubbedanime.net'
	-H 'pragma: no-cache'
	-H 'cache-control: no-cache'
	-H 'user-agent: '"$USER_AGENT"
	-H 'origin: https://ww5.dubbedanime.net'
	-H 'sec-fetch-site: same-origin'
	-H 'sec-fetch-mode: cors'
	-H 'sec-fetch-dest: empty'
)

if [ -f ~/.local/share/danime/cookies.txt ]; then
	CURL_OPTIONS+=(--cookie ~/.local/share/danime/cookies.txt)
fi

langs=(
	'০১২৩৪৫৬৭৮৯'
	'〇一二三四五六七八九'
	'０１２３４５６７８９'
)
ellipsis()
{
	python3 -c "try:
	from sys import argv
	l=int(int(argv[1])/2)
	if len(' '.join(argv[2:]))>l*2:
		print(' '.join(argv[2:])[0:l],'...',' '.join(argv[2:])[-l:],sep='')
	else:
		print(' '.join(argv[2:]),sep='')
except KeyboardInterrupt:
	pass" "$@"

}
clear_line()
{
	tput sc
	for ((i = 0; i <= $1; i++)); do
		printf "\r%-${COLUMNS}s"
	done
	tput rc
}
expand_limit()
{
	${DEBUG:-false} && set -x
	local i j n
	if [[ $1 =~ ^[[:digit:]]+-$ ]]; then
		n=${1%%-*}
		for ((i = n; i <= $2; i++)); do
			((i <= $2)) && printf "%d " "$i"
		done
	else
		for n in $(echo "$1" | cut -d, -f1- --output-delimiter=' '); do
			if [[ $n =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then
				i=${n%%-*}
				j=${n##*-}
				if ((j <= $2)); then
					expand_limit "$i-" "$j"
				else
					expand_limit "$i-" "$2"
				fi
			elif [[ $n =~ ^[[:digit:]]+$ ]]; then
				((n <= $2)) && printf "%d " "$n"
			else
				expand_limit "$n" "$2"
			fi
		done
	fi | tr \  \\n | sort -nu | tr \\n \  | sed 's| $|\n|g'
	${DEBUG:-false} && set +x
	return 0
}
contract_limit()
{
	local k
	read -ra k < <(echo "$@" | tr , ' ')
	set "${k[@]}"
	unset k
	${DEBUG:-false} && set -x
	local max k m n o
	max=$1
	k=0
	shift
	for ((i = 2; i <= $#; i++)); do
		m=${*:i-2:1}
		n=${*:i-1:1}
		o=${*:i:1}
		k=$((${o:-0} - ${n:-0}))
		if ((k >= 2)) && ((n - m < 2)) && ((m != n)) && ((o < max)); then
			printf -- '-%d,%d' "$n" "$o"
		elif ((i == 2)); then
			printf '%d' "$n"
		elif (((n - m) > 1)) && (((o - n) > 1)) || ((m == n)); then
			printf ',%d' "$o"
		elif ((i == $#)) && ((o >= max)); then
			printf -- '-\n'
			break
		elif ((i == $#)) && ((o < max)); then
			printf -- '-%d\n' "$o"
			break
		fi
		if ((o > max)); then
			break
		fi
	done
	${DEBUG:-false} && set +x
	return 0
}
byte_mr()
{
	sed '
	s/\([0-9][0-9]*\(\.[0-9]\+\)\?\)[kK]/\1*1000/g;
	s/\([0-9][0-9]*\(\.[0-9]\+\)\?\)[mM]/\1*1000000/g
	' < /dev/stdin | bc | sed 's/\..*$//'
}
validate_limit()
{
	${DEBUG:-false} && set -x
	if ! [[ $1 =~ ^[[:digit:],-]+$ ]]; then
		return 1
	fi
	if [[ $1 =~ ^[[:digit:]]+-$ ]]; then
		return 0
	else
		local ret
		ret=0
		for n in $(echo "$1" | cut -d, -f1- --output-delimiter=' '); do
			if [[ $n =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then
				i=${n%%-*}
				j=${n#*-}
				if ((j <= i)); then
					((ret++))
				fi
			elif ! {
				[[ $n =~ ^[[:digit:]]+-$ ]] || [[ $n =~ ^[[:digit:]]+$ ]]
			}; then
				((ret++))
			fi
		done
		return "$ret"
	fi
	${DEBUG:-false} && set +x
	return 0
}
num_unicode2ascii()
{
	sed "$(for n in "${langs[@]}"; do echo "y/$n/0123456789/;"; done)"
}
srand()
{
	python3 -c 'import numpy as np
from sys import argv
def random_spaced(low, high, delta, n, size=1):
	"""
	Choose n random values between low and high, with minimum spacing delta.
		If size is None, one sample is returned.
	Set size=m (an integer) to return m samples.
		The values in each sample returned by random_spaced are in increasing
	order.
	"""
	empty_space = high - low - (n-1)*delta
	if empty_space < 0:
		return [low, high - delta]
	if size is None:
		u = np.random.rand(n)
	else:
		u = np.random.rand(size, n)
		x = empty_space * np.sort(u, axis=-1)
	return low + x + delta * np.arange(n)
try:
		print(*(str(int(n)) for n in random_spaced(int(argv[1]),int(argv[2]),int(argv[3]),int(argv[4]))[0]),sep=" ")
except KeyboardInterrupt:
	pass' "$@"

}
anime_cover()
{
	local anime_cover_img
	anime_cover_img=$1
	#ext=${anime_cover_img##*.}
	if [ ! -e folder.jpg ]; then
		{
			curl --config /dev/null -kLsIXGET "$anime_cover_img" && wget --no-check-certificate -q "$anime_cover_img" -cO "cover.jpg"
		}                                                                                                   &> /dev/null
		if {
			! grep -q cover.jpg .hidden &> /dev/null
		}                                         && [ -f cover.jpg ]; then
			echo cover.jpg >> .hidden
		fi
	fi
}
replace_invalid()
{
	if [[ $1 == dir ]]; then
		sed 's|<|＜|g;s|>|＞|g;s|:|꞉|g;s|\"|＂|g;s|/|⧸|g;s|\\|⧹|g;s|?|？|g;s|\||ǀ|g;s|\*|🞵|g;s|\.$|.'$'\342\200\213|g'
	else
		sed 's|<|＜|g;s|>|＞|g;s|:|꞉|g;s|\"|＂|g;s|/|⧸|g;s|\\|⧹|g;s|?|？|g;s|\||ǀ|g;s|\*|🞵|g;s| |-|g'
	fi
}
remote_exist()
{
	if echo "$@" | grep -q http; then
		if [[ $(curl --config /dev/null -kLsIXGET "$@" | awk '/HTTP\// {print $2}' | tail -1) =~ 2[[:digit:]]. ]]; then
			return 0
		else
			return 1
		fi
	else
		return 2
	fi

}
#end:code
