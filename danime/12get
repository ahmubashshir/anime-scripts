#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2015
# shellcheck disable=SC2143
source libbash
source spinner
DEBUG=${DEBUG:-false}
sp=$sp31
SPINNER_DELAY=0.04
source "$(dirname "$0")"/13download
source "$(dirname "$0")"/01include
#start:code
da_get() {
	series="$1"
	TITLE="$2"
	TYPE=${1%/*}
	if [ "$series" = "" ]; then
		exit 3
	fi
	start_spinner "Fetching \"${series#-*}\" info"
	da_page=$(curl "https://ww5.dubbedanime.net/$series" 2> /dev/null)
	if [[ $TYPE == anime ]]; then
		baseurl=$(echo "$da_page" | tr -d \\n\'\" | sed 's|<li|\n<li|g;s|</li>|</li>\n|g' | sed 's|><| >< |g' | tr -s '[:space:]' | sed 's|>Episode [[:digit:]]*.*$||gI' | grep class=jt-di | tr -s \>\< \  | (
			while read -r EPISODE; do echo $EPISODE | tr \  \\n | grep '^href\|^data' | xargs echo | sed 's|data-subbed|subbed|g;s|data-dubbed|dubbed|g' | awk '{print $3";"$2";"$1}'; done
			unset EPISODE
		) | sort -g)
	else
		baseurl=$(echo "$da_page" | grep "$(echo "$series" | cut -d- -f2-)" | tr \ \> \\n | grep ^href | tac | sort -u | cut -d= -f2 | tr -d \' | sort -g)
	fi
	stop_spinner "$([[ -n $baseurl ]] && echo 0 || echo 1)"
	$NORESET || reset
	${DEBUG:-false} && set -x
	vbar "$(ellipsis $(($(tput cols)-10)) "$TITLE")" true
	[[ -z $baseurl ]] && echo "$(
		tput setaf 1
		tput dim
	)No episode is available to download yet.$(tput sgr0)" 1>&2 && exit 1
	if [[ $TYPE == cartoon ]]; then
		url="$baseurl"
	else
		if [[ -n ${PREFFERED_TR:-dub} ]];then
			tr="$(
				(
					echo "$baseurl" | grep -q "${PREFFERED_TR:-dub}bed=true" && echo ${PREFFERED_TR:-dub}
				)||(
					echo "$baseurl" | tr \; \\n | grep "$(echo -e 'dub\nsub'|grep -v ${PREFFERED_TR:-dub})bed=true$" | sort -u | cut -d= -f1 | cut -c1-3
				)||(
					echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1 | cut -c1-3
				)
			)bed"
		elif [[ -n $FORCE ]]; then
			tr=${FORCE}bed
		elif [ "$(echo "$baseurl" | grep dubbed=true | tr -d '[:space:]')" != "" ] ; then
			tr=dubbed
		elif [ "$(echo "$baseurl" | grep subbed=true | tr -d "[:space:]")" != "" ];then
			tr=$(echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1)
		fi
		url="$(echo "$baseurl" | cut -d\; -f1 | awk "{print \$0\"-english-$tr\";}")"
		if ! (echo "$url" | grep -q "${tr}$"); then
			echo "$(
				tput setaf 1
				tput dim
			)\"$(ellipsis 38 "$TITLE")\" doesn't have any ${tr}bed episode yet.$(tput sgr0)" 1>&2
			return 1
		fi
		url="$(echo "$url" | grep ^href | cut -d= -f2)"
		for k in $url;do
			if [ "$(echo "${k##*/}"|cut -d- -f1)" -gt "$(echo "$url"|grep "${k#*-}"|head -1|xargs basename|cut -d- -f1)" ];then
				url="${url//$k/${k//-episode-/-extra-}}"
			fi
		done
	fi
	${DEBUG:-false} && set -x
	if [[ $EP_LIST_RANGE =~ [[:digit:],]+-[[:digit:],]+ ]]; then
		ep_show="range($EP_LIST_RANGE) "
		dl_notify="Episodes in ${ep_show}are"
	elif [[ $EP_LIST_RANGE =~ [[:digit:],]+- ]]; then
		ep_show="range($EP_LIST_RANGE$(echo "$url" | wc -l)) "
		dl_notify="Episodes in ${ep_show}are"
	elif [[ -n $EP_LIST_RANGE ]]; then
		ep_show="file $EP_LIST_RANGE "
		dl_notify="Episode ${ep_show:5}is"
	fi
	${DEBUG:-false} && set -x
	epc=$(echo "$url" | wc -l)
	${DEBUG:-false} && set +x
	anime_cover "https://cdn.animeapi.com/images/${1%%-*}.jpg"
	ep=$(expand_limit "${EP_LIST_RANGE:-1-}" "$epc")
	if [ "$(echo $ep|tr \  \\n|wc -l)" -eq 2 ];then
		ep_show="file ${ep%% *} and ${ep##* } "
		dl_notify="Episode ${ep_show}are"
	elif [ "$(echo $ep|tr \  \\n|wc -l)" -eq 1 ];then
		ep_show="file $ep "
		dl_notify="Episode ${ep_show:5}is"
	fi
	if [[ -n $ep ]] && [[ -n $ep_show ]]; then
		[[ $TYPE == cartoon ]] && vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc Downloading:$ep_show" || (
			vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Type:${tr:-dubbed}"
			vbar " Files:$epc Downloading:$ep_show"
		)
	else
		[[ $TYPE == cartoon ]] && vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc" || vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc Type:${tr:-dubbed}"
	fi
	if ${EP_LIST:-false} && [ -z "$EP_LIST_RANGE" ]; then
		read -rp$'Enter file list to download: ' EP_LIST_RANGE
		ep=$(expand_limit "${EP_LIST_RANGE:-1-}" "$epc")
	fi
	${DEBUG:-false} && set -x
	for k in $ep; do
		da_get_episede "$(echo "$url" | head -n "$k" | tail -1)" "$k" "$epc"
		if ! (exit $?); then
			echo "Failed to download $k"
			[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url" | head -n "$k" | tail -1)\">$k</a>"
			echo $BREAK
			${BREAK:-true} && break
		fi
	done
	[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "<b>$TITLE</b>\n${dl_notify} downloaded"
}
#end:code
if ! ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] \
	|| [[ -n $BASH_VERSION ]] && (return 0 2> /dev/null)); then
	da_get "$@"
fi

