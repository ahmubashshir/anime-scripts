#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
. libbash
. spinner
. 01include
DEBUG=${DEBUG:-false}
#start:code
parse_episede_id() {
	local ep_file_host ep_file_id n
	ep_file_host=$(echo "$@" | jq -r '.host'|tr '.' '_')
	ep_file_id=$(echo "$@" | jq -r '.id')
	ep_file_auth=$(echo "$@" | jq -r '.auth'|grep -v 'null'||true)
	for n in $ep_file_id;do
		if [ -n "$(type -t get_url_$ep_file_host)" ]; then
			get_url_$ep_file_host "${n}$ep_file_auth" 2> /dev/null
		else
			echo "unimplemented:${ep_file_host/_/.}"
			break
		fi
	done
}

get_url_mp4upload() {
	curl "https://www.mp4upload.com/embed-$1.html" 2> /dev/null | grep 'eval(' | cut -d\> -f2- | js-beautify -xn -e \\n -k --brace-style=expand | tr -d \",\ \)\; |grep '^player\.src'|cut -d\( -f2-
	if [ "${PIPESTATUS[1]}" = "1" ];then
		echo "error:File is deleted."
	fi
}
get_url_trollvid() {
	curl -H 'range: bytes=0-' -H 'referer: https://localhost/' -w '%{redirect_url}' "$(curl -H 'accept-encoding: identity' -H 'referer: https://localhost/' "https://mp4.sh/embed/$1" --output - 2> /dev/null | grep source | tr -d \" | tr \  \\n | grep '^src' | cut -d= -f2-)" 2> /dev/null | grep '^http' | cat
}
get_url_mp4_sh() {
    local url
    url="$(curl -H 'accept-encoding: identity' -H 'referer: https://localhost/' "https://mp4.sh/embedc/$1" --output - 2> /dev/null | grep source | tr -d \" | tr \  \\n | grep '^src' | cut -d= -f2-)"
    if ! echo "$url" | grep -q 'st=.*e=.*';then
	    curl -H 'range: bytes=0-0' -H 'referer: https://localhost/' -w '%{redirect_url}' "$url" 2> /dev/null | grep '^http' | cat
	else
	    echo "$url"
	fi
}

get_url_vidstreaming() {
	curl -s "https://vidstreaming.io/download?id=$1" |grep 'http'|grep 'download'|tr -d '[:blank:]'|cut -d\" -f2|sed 's|amp\;||g'|tail -2|head -1
}
#end:code
