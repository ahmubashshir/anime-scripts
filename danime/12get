#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2015
# shellcheck disable=SC2143
# shellcheck disable=SC2001
. libbash
. spinner
DEBUG=${DEBUG:-false}
sp=$sp31
SPINNER_DELAY=0.04
. 13download
. 01include
#start:code
da_get() {
	series="$1"
	TITLE="$2"
	TYPE=${1%/*}
	if [ "$series" = "" ]; then
		exit 3
	fi
	local ep_progress total_pw
	if [ -f ".type" ];then
		FORCE="$(<.type)"
	fi
	start_spinner "Fetching \"${series#-*}\" info"
	da_page=$(curl "https://ww5.dubbedanime.net/$series" 2> /dev/null)
	if [[ $TYPE == anime ]]; then
		baseurl=$(echo "$da_page" | xmllint --html --nowarning --xpath '//ul[@id="jump-episode"]/node()' - 2> /dev/null | awk '/<li/,/li>/{printf $0;if (++o%3 == 0) print ""}' | (while read -rs xml_node; do echo -e "$xml_node" | xmllint --html --nowarning --xpath 'concat("href=",//a/@href,";subbed=",//li/@data-subbed="true",";dubbed=",//li/@data-dubbed="true"," ")' -; done) | tr -s ' ' \\n | tac)
	else
		baseurl=$(echo "$da_page" | xmllint --html --nowarning --xpath '//*[@id="jump-episode"]/li/node()' - 2>&3 | (while read -rs xml_node; do echo "$xml_node" | xmllint --html --nowarning --xpath 'concat("href=",//a/@href," ")' - 2> /dev/null; done) | tr -s ' ' '\n' | grep -v '=$' | tac)
	fi
	stop_spinner "$([[ -n $baseurl ]] && echo 0 || echo 1)"
	$NORESET || reset
	${DEBUG:-false} && set -x
	vbar "$(ellipsis $(($(tput cols) - 10)) "$TITLE")" true
	[[ -z $baseurl ]] && echo "$(
		tput setaf 1
		tput dim
	)No episode is available to download yet.$(tput sgr0)" 1>&2 && exit 1
	if [[ $TYPE == cartoon ]]; then
		url="$(echo "$baseurl"|cut -d= -f2-)"
	else
		if [[ -n ${PREFERRED_TR:-dub} ]] && [[ -z $FORCE ]]; then
			tr="$(
				(
					echo "$baseurl" | grep -q "${PREFERRED_TR:-dub}bed=true" && echo ${PREFERRED_TR:-dub}
				) || (
					echo "$baseurl" | tr \; \\n | grep "$(echo -e 'dub\nsub' | grep -v ${PREFERRED_TR:-dub})bed=true$" | sort -u | cut -d= -f1 | cut -c1-3
				) || (
					echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1 | cut -c1-3
				)
			)bed"
		elif [[ -n $FORCE ]]; then
			tr=${FORCE}bed
		elif [ "$(echo "$baseurl" | grep dubbed=true | tr -d '[:space:]')" != "" ]; then
			tr=dubbed
		elif [ "$(echo "$baseurl" | grep subbed=true | tr -d "[:space:]")" != "" ]; then
			tr=$(echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1)
		fi
		url="$(echo "$baseurl" | grep "$tr=true" |cut -d\; -f1 | awk "{print \$0\"-english-$tr\";}")"
		if ! (echo "$url" | grep -q "${tr}$"); then
			echo "$(
				tput setaf 1
				tput dim
			)\"$(ellipsis 38 "$TITLE")\" doesn't have any ${tr}bed episode yet.$(tput sgr0)" 1>&2
			if ! find . -name '*.mp4' |grep -q '\.mp4$';then
				cd ..
				rm -rf "$OLDPWD"
			fi
			return 1
		fi
		url="$(echo "$url" | grep ^href | cut -d= -f2)"
		for k in $url; do
			if [ "$(echo "${k##*/}" | cut -d- -f1)" -gt "$(echo "$url" | grep "${k#*-}" | head -1 | xargs basename | cut -d- -f1)" ]; then
				url="${url//$k/${k//-episode-/-extra-}}"
			fi
		done
	fi
	url="$(echo "$url" |sed 's/^\///g')"
	${DEBUG:-false} && set -x
	epc=$(echo "$url" | wc -l)
	if ${CONTINUE-false} && [[ -z $EP_LIST_RANGE ]] && [[ -f ".ep_queue" ]]; then
		EP_LIST_RANGE="$(contract_limit $epc "$(pqueue ".ep_queue")")"
	fi
	if ${EP_LIST:-false} && [[ -z $EP_LIST_RANGE ]]; then
		[[ $TYPE == cartoon ]] && vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc" || vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Type:${tr:-dubbed} Files:$epc"
		read -eri "1-$epc" -p$'Episode list: '  EP_LIST_RANGE
		ep="$(echo "${EP_LIST_RANGE:-1-}"| num_unicode2ascii)"
		tput cuu 2
	fi
	EP_LIST_RANGE="$(echo "$EP_LIST_RANGE"|sed 's/^[-,[:blank:]]*//g')"
	if [[ $EP_LIST_RANGE =~ [[:digit:],]+-[[:digit:],]+ ]]; then
		ep_show="range($(ellipsis "$(($(tput cols) - 50))" "$(echo "$EP_LIST_RANGE"|tr -d \ )" ))"
		dl_notify="Episodes in ${ep_show} are"
	elif [[ $EP_LIST_RANGE =~ [[:digit:],]+- ]]; then
		ep_show="range($EP_LIST_RANGE$(echo "$url" | wc -l))"
		dl_notify="Episodes in ${ep_show} are"
	elif [[ -n $EP_LIST_RANGE ]]; then
		ep_show="file $EP_LIST_RANGE"
		dl_notify="Episode ${ep_show:5} is"
	fi
	if [ -n "$FORCE" ];then
		echo "$FORCE" > .type
	fi
	${DEBUG:-false} && set +x
	${SKIP_DOWNLOAD:-false} || anime_cover "https://cdn.animeapi.com/images/${1%%-*}.jpg"
	ep=$(expand_limit "${EP_LIST_RANGE:-1-}" "$epc")
	if [ "$(echo $ep | tr \  \\n | wc -l)" -eq 2 ]; then
		ep_show="file ${ep%% *} and ${ep##* } "
		dl_notify="Episode ${ep_show}are"
	elif [ "$(echo $ep | tr \  \\n | wc -l)" -eq 1 ]; then
		ep_show="file $ep "
		dl_notify="Episode ${ep_show:5}is"
	fi
	if [[ -n $ep ]] && [[ -n $ep_show ]]; then
		[[ $TYPE == cartoon ]] && vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc Downloading:$ep_show" || (
			vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Type:${tr:-dubbed}"
			vbar " Files:$epc Downloading:$ep_show "
		)
	else
		[[ $TYPE == cartoon ]] && vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc" || vbar "ID:$(echo "${1%%-*}" | cut -d/ -f2) Files:$epc Type:${tr:-dubbed}"
	fi
	total_pw=$(echo "$ep"|tr \  \\n|wc -l)
	${SKIP_DOWNLOAD:-false} || enqueue ".ep_queue" $ep
	${DEBUG:-false} && set -x
	for k in $ep; do
		(( ep_progress+=1 ))
		da_get_episede "$(echo "$url" | head -n "$k" | tail -1)" "$k" "$epc" "$ep_progress" "$total_pw"
		if ! (exit $?); then
			echo "Failed to download $k"
			[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url" | head -n "$k" | tail -1)\">file $k</a>"
			${BREAK:-true} && break
		else
			${SKIP_DOWNLOAD:-false} || dequeue ".ep_queue"
		fi
	done
	[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "<b>$TITLE</b>\n${dl_notify} downloaded"
}
#end:code
if ! ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] \
	|| [[ -n $BASH_VERSION ]] && (return 0 2> /dev/null)); then
	da_get "$@"
fi
