#!/bin/bash
. 00header
. 01include
. 02help
. 11search
. 12get
. 13download
. 14parse
DEBUG=${DEBUG:-false}
# shellcheck disable=SC2086
#start:code
if [[ $# != 0 ]] && [[ $1 != latest ]]; then
	while [ -n "$1" ]; do
		case $1 in
			-v|--version)
				if [ "${0##*/}" = "35footer" ];then
					echo " danime  master-$(git rev-parse HEAD|cut -c 1-6)"
				else
					echo " danime  dist-$(grep '^#VERSION_INFO=' "$0"|cut -d= -f2)"
				fi
				echo
				echo
				da_get_license
				exit 0
			;;
			-l|--license)
				if [ -e "LICENSE" ] && [ "$(head -1 LICENSE|tr -d '[:blank:]')" = "GNUGENERALPUBLICLICENSE" ];then
					da_get_license true
					echo
					echo "See 'LICENSE' for more details."
				else
					da_get_license
				fi
				exit 0
			;;
			--break|-b)
				BREAK=true
			;;
			--no-break|-nb)
				BREAK=false
			;;
			-B[[:digit:].]*[kKmM] | --block=[[:digit:].]*[kKmM])
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]] || BS=${1/-B/}
				BS=$(echo "$BS" | byte_mr)
				;;
			-B[[:digit:].]* | --block=[[:digit:].]*)
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+$ ]] || BS=${1/-B/}
				;;
			-B | --block)
				BS=$2
				if [[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]]; then
					BS=$(echo "$BS" | byte_mr)
					shift
				else
					echo "Invalid block size." 1>&2
				fi
				;;
			-d | --debug)
				DEBUG=true
				;;
			-A)
				TYPE=anime
				;;
			-C)
				TYPE=cartoon
				;;
			-c | --continue)
				CONTINUE=true
				NORESET=true
				;;
			-r | --replace)
				if echo "$2" | grep -q 'manual\|fail'; then
					eval "REPLACE_$(echo $2 | tr '[:lower:]' '[:upper:]')=true"
					shift
				else
					REPLACE_FAIL=true
					REPLACE_MANUAL=true
				fi
				;;
			-r[fm] | --replace=fail | --replace=manual)
				REPLACE="$(echo ${1#*=} | tr '[:lower:]' '[:upper:]')"
				if ! echo $REPLACE|grep -qi 'manual\|fail';then
					REPLACE="$(
						if [ "${1/-r/}" = "m" ];then
							echo manual
						else
							echo fail
						fi|tr '[:lower:]' '[:upper:]'
					)"
				fi
				eval "REPLACE_$REPLACE=true"
				unset REPLACE
				;;
			-e | --ep-list)
				EP_LIST=true
				if [[ $2 =~ ^[[:digit:],-]+$ ]]; then
					EP_LIST_RANGE=$2
					shift
				fi
				;;
			-e[[:digit:],-]* | --ep-list=[[:digit:],-]*)
				EP_LIST=true
				EP_LIST_RANGE=${1#*=}
				[[ $EP_LIST_RANGE =~ ^[[:digit:],-]+$ ]] || EP_LIST_RANGE=${1/-e/}
				EP_LIST_RANGE=$(echo "$EP_LIST_RANGE" | grep -o . | grep '^[[:digit:],-]*$' | tr -d \\n | sed 's/,$//')
				;;
			-s | --select)
				if [[ $2 =~ ^[[:digit:],-]+$ ]]; then
					RES_LIST=$2
					shift
				else
					echo "Invalid selection index." 1>&2
					exit 1
				fi
				;;
			-s[[:digit:],-]* | --select=[[:digit:],-]*)
				RES_LIST=${1#*=}
				[[ $RES_LIST =~ ^[[:digit:],-]+$ ]] || RES_LIST=${1/-s/}
				;;
			-nc | --no-continue)
				CONTINUE=false
				NORESET=true
				;;
			-h | --help)
				danime_help
				exit 0
				;;
			-t[[:digit:]]* | --timeout=[[:digit:]]*)
				RSOLV=${1#*=}
				[[ $RSOLV =~ ^[[:digit:]]+$ ]] || RSOLV=${1/-t/}
				;;
			-t | --timeout)
				RSOLV=$2
				shift 1
				;;
			-a | --all)
				DOWNLOAD_ALL=true
				unset RES_LIST EP_LIST_RANGE
				;;
			-nr | --no-reset)
				NORESET=true
				;;
			-f[[:alpha:]]* | --force=*)
				FORCE=${1##*=}
				[[ $FORCE =~ ^[ds]ub$ ]] || FORCE=${1/-f/}
				;;
			-f | --force)
				FORCE=$2
				shift 1
				if [ -z "$FORCE" ]; then
					FORCE=${TYPE_ANIME:0:3}
				fi
				;;
			-n | --skip)
				SKIP_DOWNLOAD=true
				;;
			-S|--sub|-D|--dub)
				PREFFERED_TR=$(echo "$1"|tr -d -|cut -c1 |tr '[:upper:]' '[:lower:]')ub
				;;
			-* | --*)
				echo Invalid option -- $1 1>&2
				exit 1
				;;
			*)
				SEARCHSTR="$(echo $SEARCHSTR $1 | sed 's|^ *||g;s|* $||g')"
				;;
		esac
		shift 1
	done
	if [[ -n $TYPE_ANIME ]] && ([[ $TYPE_ANIME = subbed ]] || [[ $TYPE_ANIME = dubbed ]]); then
		tr=$TYPE_ANIME
	else
		tr="$(echo "$@" | sed 's|০|0|g;s|১|1|g;s|২|2|g;s|৩|3|g;s|৪|4|g;s|৫|5|g;s|৬|6|g;s|৭|7|g;s|৮|8|g;s|৯|9|g' | sed 's| |\n|g' | grep -E '^sub$' || echo dub)bed"
	fi
	if ([[ -n "$EP_LIST_RANGE" ]] || [[ -n "$RES_LIST" ]]) && $DOWNLOAD_ALL; then
		DOWNLOAD_ALL=false
		echo -e "Warning: --all/-a option can only be used when no\n\tselection or episode limit specified.\n\tDisabling autodownload mode"
	fi
	[[ -n $FORCE ]] && echo ${FORCE} enforced.
	if [[ $SEARCHSTR != '' ]]; then
		if [ -n "$NC" ] || check_up_server dubbedanime.net ${RSOLV:-1}; then
			if [ -n "$EP_LIST_RANGE" ] && ! validate_limit $EP_LIST_RANGE; then
				echo "$(
					tput setaf 1
					tput dim
				)Invalid limit:$EP_LIST_RANGE$(tput sgr0)" > /dev/stderr
				exit 1
			fi
			da_search $SEARCHSTR
			exit $?
		else
			echo Request timed out
			exit -2
		fi
	else
		danime_help
		exit 1
	fi
elif [[ $1 == latest ]]; then
	#fetch_letest
	true
else
	danime_help
	exit 1
fi
#end:code

