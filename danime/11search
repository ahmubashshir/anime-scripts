#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC1003
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2015
# shellcheck disable=SC2143
DEBUG=${DEBUG:-false}
. libbash
. spinner
. 01include
. 10db
. 12get
#start:code
da_api_search() {
	python3 -c '#!/usr/bin/python3
import requests
import json
from sys import argv
import os
from urllib.parse import quote_plus
from http.cookiejar import MozillaCookieJar as MCJ
cookiesFile = "'$HOME'/.da-cookies.txt"
cj = MCJ(cookiesFile)
if os.path.exists(cookiesFile):
	cj.load(ignore_discard=True, ignore_expires=True)
r = requests.Session()

r.headers = {
    "authority"			: "ww5.dubbedanime.net",
    "pragma"			: "no-cache",
    "cache-control"		: "no-cache",
    "accept"			: "application/json",
    "x-requested-with"	: "XMLHttpRequest",
    "user-agent"		: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
    "origin"			: "https://ww5.dubbedanime.net",
    "sec-fetch-site"	: "same-origin",
    "sec-fetch-mode"	: "cors",
    "sec-fetch-dest"	: "empty",
    "referer"			: "https://ww5.dubbedanime.net/browse-anime?search=%s"%quote_plus(" ".join(argv[1:]))
}

r.cookies = cj

def refine(Str):
	d={
		'\''<'\'':'\''ï¼œ'\'',
		'\''>'\'':'\''ï¼ž'\'',
		'\'':'\'':'\''êž‰'\'',
		'\''"'\'':'\''ï¼‚'\'',
		'\''/'\'':'\''â§¸'\'',
		'\''\\'\'':'\''â§¹'\'',
		'\''?'\'':'\''ï¼Ÿ'\'',
		'\''|'\'':'\''â«¿'\'',
		'\''*'\'':'\''ðŸžµ'\'',
	}
	for n in d.keys():
		Str=Str.replace(n,d[n])
	return Str
try:
	if len(argv)>1:
		data = {
			"model"			:	"'${TYPE:-anime}'".title(),
			"size"			:	200,
			"what"			:	"query",
			"letter"		:	"all",
			"query[order]"	:	"date,asc",
			"query[search]"	:	str.join(" ", argv[1:])
		}
		try:
			for n in r.post("https://ww5.dubbedanime.net/ajax/paginate", data).json()['\''results'\'']:
				print("%s/%s-%s:%s:%s"%('\'${TYPE:-anime}\''.lower(),n['\''id'\''],n['\''slug'\''],0 if not '\''total'\'' in n else n['\''total'\''],refine(n['\''title'\''])))
		except:
			pass
except KeyboardInterrupt:
	pass' "$@"

}
da_search() {
	start_spinner "Searching for $*"
	RES=$(da_api_search "$@")
	if [ -z "$(echo "$RES" | tr -d '[:space:]')" ]; then
		(exit 4)
	fi
	stop_spinner $?
	if [ -z "$(echo "$RES" | tr -d '[:space:]')" ]; then
		echo You should check your keywords.
		return 4
	fi
	total_res=$(echo "$RES" | wc -l)
	if ((total_res==1));then
		RES_LIST='1'
	elif [ -z "$RES_LIST" ] && ! ${DOWNLOAD_ALL:-false}; then
		vbar
		vbar "DubbedAnime.net Search Result" true
		vbar
		vbar "Select One or more to download"
		vbar
		echo "$RES" | cut -d: -f2- | awk -F: "{printf \"%-${#total_res}d ) %s\",NR,\$2;if (\$1) {print \" (eps:\"\$1\")\" }else{print \"\"}}"
		read -rp$'Download: ' RES_LIST
	elif ${DOWNLOAD_ALL:-false} && [ -z "$RES_LIST" ]; then
		RES_LIST='1-'
	fi
	if [ -z "$RES_LIST" ];then
		vbar
		vbar "DubbedAnime.net Search Result" true
		vbar
		vbar "Select One or more to download"
		vbar
		echo "$RES" | cut -d: -f2- | awk -F: "{printf \"%-${#total_res}d ) %s\",NR,\$2;if (\$1) {print \" (eps:\"\$1\")\" }else{print \"\"}}"
		read -rp$'Download: ' RES_LIST
	fi
	RES=$(echo "$RES"|cut -d: -f1,3-)
	RES_LIST=$(expand_limit "$(echo "$RES_LIST"|num_unicode2ascii)" "$total_res")
	for n in $RES_LIST; do
		target=$(echo "$RES" | head -n "$n" | tail -1)
		local base
		base="$(set_basedir "${target%%:*}")"
		if ! [ -d "$base" ] || ! [ -e "$base" ]; then
			rm -rf "$base"
			mkdir -p "$base"
		fi
		cd "$base" || true
		local dir
		dir="$(echo "$target" | cut -d: -f2- | replace_invalid dir)"
		${SKIP_DOWNLOAD:-false} || if [ ! -d "$dir" ]; then
			rm -f "$dir"
			mkdir "$dir"
		fi
		${SKIP_DOWNLOAD:-false} || {
			cd "$dir" || continue
		}
		${UPDATE_QUEUE:-false} && vbar
		echo -e "Title: '$dir'"
		da_get "$(echo "$target" | cut -d: -f1)" "$dir"
		if [ "$(echo "$RES_LIST" | wc -w)" -gt 1 ] && ! $NOBREAK; then
			read -rsp$'Press Return to download next.'
			printf '\n'
		fi
	done
}
da_update()
{
	local TYPE id dir updatable n new_eps
	NORESET=true
	if ${DO_UPDATE_LIST:-false};then
		for n in $(da_db list);do
			TYPE="$(dirname $n)"
			id="$(basename $n)"
			if ! [ -d "$(da_db get path)" ];then
				da_db del
				continue
			fi
			echo "[$n] $(da_db get title)"
		done
		return 0
	elif [ -z "${DO_UPDATE_ONLY}" ];then
		updatable=()
		for n in $(da_db list);do
			TYPE="$(dirname $n)"
			id="$(basename $n)"
			if ! [ -d "$(da_db get path)" ];then
				da_db del
				continue
			fi
			echo -n "[$n] Checking update..."
			new_eps=$(( $(da_get_len "$n-$(da_db get url)") - $(da_db get saved) ))
			if ((new_eps>0));then
				updatable+=( "$n" )
				echo -e "\r[$n] Queueing update($new_eps+)..."
			else
				echo
			fi
		done
	elif [[ ${DO_UPDATE_ONLY} =~ ^[[:digit:],]*$ ]]; then
		read -r -a updatable < <(echo "${DO_UPDATE_ONLY//,/ }")
	fi
	for n in "${updatable[@]}";do
		TYPE="$(dirname $n)"
		id="$(basename $n)"
		dir="$(da_db get path)"
		if ! [ -d "$dir" ];then
			mkdir -p "$dir"||continue
		fi
		cd "$dir"||continue
		FILE_LIST_RANGE=$(da_db get saved|awk '{print ($0 == "null" || $0 == "0")?"1-":$0"-";}')
		da_get "$n-$(da_db get url)" "$(basename "$dir")"
		if [ "$(da_db get saved)" -ge "$(da_db get total)" ];then
			da_db del;
		fi
		if ! $NOBREAK; then
			read -rsp$'Press Return to download next.'
			printf '\n'
		fi
	done
}
set_basedir() {
	case $1 in
		*-avatar-the-legend-of-korra-* | *-avatar-the-last-airbender-*)
			echo "$CARTOON_PATH/Avatar"
		;;
		anime/*) echo "$ANIME_PATH" ;;
		*power-rangers*) echo "$POWER_RANGERS_PATH" ;;
		*tv-series* | *kamen-rider*) echo "$TV_SERIES_PATH" ;;
		*movie*) echo "$MOVIE_PATH" ;;
		cartoon/*) echo "$CARTOON_PATH" ;;
	esac
}
#end:code
if ! ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] \
	|| [[ -n $BASH_VERSION ]] && (return 0 2> /dev/null)); then
	da_search "$@"
fi
