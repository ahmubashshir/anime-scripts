#!/bin/bash
((def_footer)) && return 0 || def_footer=1
. 00header
. 01include
. 02help
. 11search
. 12get
. 13download
. 14parse
DEBUG=${DEBUG:-false}
#start:code
if [[ $# != 0 ]] && [[ $1 != latest ]]; then
	while [ -n "$1" ]; do
		case $1 in
			-v | --version)
				#+option
				#short: -v
				#long: --version
				#text: Show version and license.
				#-option
				if [ "${0##*/}" = "35footer" ]; then
					printf "danime master-r%d.%s" \
						"$(git rev-list --count HEAD)" \
						"$(git rev-parse --short HEAD)"
					(($(printf '%d' "$(git diff --shortstat | cut -d' ' -f2)"))) && {
						printf '-'
						git diff --shortstat | cut -d' ' -f2
					}
				else
					echo "danime $(awk '/^# VERSION/{print $3;exit}' "$0")"
				fi
				echo
				da_get_license
				exit 0
				;;
			-L | --license)
				#+option
				#short: -L
				#long: --license
				#text: Show license.
				#-option
				da_get_license
				exit 0
				;;
			--login)
				#+option
				#long: --login
				#text: Log in to dubbedanime.net.
				#args: <username> <passeword>
				#-option
				shift
				(($# != 2)) && {
					echo invalid number of arguments
					exit
				}
				exec curl \
					-H 'referer: https://ww5.dubbedanime.net/login' \
					-H 'origin: https://ww5.dubbedanime.net' \
					--data "username=$1" \
					--data "password=$2" \
					--data 'remember=yes' \
					https://otaku.cafe/forums/connect.php \
					-so /dev/null \
					--cookie-jar ~/.da-cookies.txt
				;;
			-i | --id)
				#+option
				#short: -i
				#long: --id
				#text: Prefer these ids to download if available.
				#args: id1[,id2[,...]]
				#-option
				PREFERRED_HOSTS="${PREFERRED_HOSTS:+$PREFERRED_HOSTS,}$2"
				shift
				;;
			--id=[[:alnum:].,]*)
				tmp="${1##*=}"
				PREFERRED_HOSTS="${PREFERRED_HOSTS:+$PREFERRED_HOSTS,}$tmp"
				unset tmp
				;;
			--list-mirror)
				#+option
				#long: --list-mirror
				#text: List supported mirrors
				#-option
				echo Supported Mirrors
				echo -e "${SUPPORTED_HOSTS//|/$'\n  '}"
				exit 0
				;;
			-m | --mirror)
				#+option
				#short: -m
				#long: --mirror
				#text: select preferred mirrors.
				#args: mirror1[,mirror2[,...]]
				#-option
				if echo "${SUPPORTED_HOSTS//|/$'\n'}" | grep -Eq "${2//,/|}"; then
					PREFERRED_HOSTS="${PREFERRED_HOSTS:+$PREFERRED_HOSTS,}$2"
				fi
				shift
				;;
			--mirror=[[:alnum:].,]*)
				tmp="${1##*=}"
				if echo "${SUPPORTED_HOSTS//|/$'\n'}" | grep -Eq "${tmp//,/|}"; then
					PREFERRED_HOSTS="${PREFERRED_HOSTS:+$PREFERRED_HOSTS,}$tmp"
				fi
				unset tmp
				;;
			--break | -b)
				#+option
				#short: -b
				#long: --break
				#text: break on error
				#-option
				BREAK=true
				;;
			-nb | --no-break)
				#+option
				#short: -nb
				#long: --no-break
				#text: don't break on error
				#-option
				BREAK=false
				;;
			-B[[:digit:].]*[kKmM] | --block=[[:digit:].]*[kKmM])
				#+option
				#short: -B
				#long: --block
				#text: set block size for testing.(allowed suffixes: kM)
				#args: <block size>
				#-option
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]] || BS=${1/-B/}
				BS=$(echo "$BS" | byte_mr)
				;;
			-B[[:digit:].]* | --block=[[:digit:].]*)
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+$ ]] || BS=${1/-B/}
				;;
			-B | --block)
				BS=$2
				if [[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]]; then
					BS=$(echo "$BS" | byte_mr)
					shift
				else
					echo "Invalid block size." 1>&2
				fi
				;;
			--debug)
				#+option
				#long: --debug
				#text: enable debug mode
				#-option
				DEBUG=true
				;;
			-A)
				#+option
				#short: -A
				#IDNT: 3
				#text: Set search type to Anime(default).
				#-option
				TYPE=anime
				;;
			-C)
				#+option
				#short: -C
				#IDNT: 3
				#text: Set search type to Cartoon.
				#-option
				TYPE=cartoon
				;;
			-c | --continue)
				#+option
				#short: -c
				#long: --continue
				#text: Reload previous episode selection.
				#-option
				CONTINUE=true
				;;
			-nc | --no-continue)
				#+option
				#short: -nc
				#long: --no-continue
				#IDNT: 1
				#text: Don't Reload previous episode selection.
				#-option
				CONTINUE=false
				;;
			-n | --no-break-or-reset)
				#+option
				#short: -n
				#long: --no-break-or-reset
				#IDNT: 1
				#text: equivalent to -nb -nr.
				#-option
				NOBREAK=true
				NORESET=true
				;;
			-R | --reset)
				#+option
				#short: -R
				#long: --reset
				#text: Clear screen on selection change.
				#-option
				NORESET=false
				;;
			-r | --replace)
				#+option
				#short: -r
				#long: --replace
				#text: Replace unmatched episode.
				#args: manual, fail
				#-option
				if echo "$2" | grep -q 'manual\|fail'; then
					eval "REPLACE_$(echo "$2" | tr '[:lower:]' '[:upper:]')=true"
					shift
				else
					REPLACE_FAIL=true
					REPLACE_MANUAL=true
				fi
				;;
			-r[fm] | --replace=fail | --replace=manual)
				REPLACE="$(echo "${1#*=}" | tr '[:lower:]' '[:upper:]')"
				if ! echo "$REPLACE" | grep -qi 'manual\|fail'; then
					REPLACE="$(
						if [ "${1/-r/}" = "m" ]; then
							echo manual
						else
							echo fail
						fi | tr '[:lower:]' '[:upper:]'
					)"
				fi
				eval "REPLACE_$REPLACE=true"
				unset REPLACE
				;;
			-f | --file-list)
				#+option
				#short: -f
				#long: --file-list
				#text: select files to download or prompt for a list.
				#args: [file-index-list]
				#-option
				FILE_LIST=true
				unset FILE_LIST_RANGE
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					FILE_LIST_RANGE=${2}
					shift
				fi
				;;
			-f[[:digit:],-]* | --file-list=[[:digit:],-]*)
				FILE_LIST=true
				FILE_LIST_RANGE=${1#*=}
				# FILE_LIST_RANGE=${FILE_LIST_RANGE// /}
				[[ $FILE_LIST_RANGE =~ ^[[:digit:],-]+$ ]] || FILE_LIST_RANGE=${1/-f/}
				FILE_LIST_RANGE=$(echo "$FILE_LIST_RANGE" | grep -o . | grep '^[[:digit:],-]*$' | tr -d \\n | sed 's/,$//')
				;;
			-s | --select)
				#+option
				#short: -s
				#long: --select
				#text: Select search results.
				#args: <result-index-list>
				#-option
				if [[ $2 =~ ^[[:digit:],-]+$ ]]; then
					RES_LIST=$2
					shift
				else
					echo "Invalid selection index." 1>&2
					exit 1
				fi
				;;
			-s[[:digit:],-]* | --select=[[:digit:],-]*)
				RES_LIST=${1#*=}
				[[ $RES_LIST =~ ^[[:digit:],-]+$ ]] || RES_LIST=${1/-s/}
				;;
			-u | --update)
				#+option
				#short: -u
				#long: --update
				#text: Update and continue incomplete downloads,
				#IDNT: 4
				#text: adding '!' as first arg inverts match.
				#IDNT: 2
				#args: [! ][id1[ id2[ ...]]]
				#-option
				DO_UPDATE=true
				if (($# > 1)); then
					shift
					DO_UPDATE_ONLY=("$@")
				fi
				;;
			-l | --list)
				#+option
				#short: -l
				#long: --list
				#text: List updatable/interrupted series.
				#-option
				DO_UPDATE_LIST=true
				;;
			-h | --help)
				#+option
				#short: -h
				#long: --help
				#text: Show help
				#-option
				danime_help
				exit 0
				;;
			-T[[:digit:]]* | --timeout=[[:digit:]]*)
				RSOLV=${1#*=}
				[[ $RSOLV =~ ^[[:digit:]]+$ ]] || RSOLV=${1/-T/}
				;;
			-T | --timeout)
				#+option
				#short: -T
				#long: --timeout
				#text: Set timeout for requests.
				#-option
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					RSOLV=${2}
					shift
				else
					echo Invalid argument.
					exit 1
				fi
				;;
			-t | --try)
				#+option
				#short: -t
				#long: --try
				#text: set retry attempts
				#args: <retry>
				#-option
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					MAX_TRY=${2}
					shift
				else
					echo Invalid argument.
					exit 1
				fi
				;;
			-t[[:digit:]]* | --try=[[:digit:]]*)
				MAX_TRY=${1#*=}
				[[ $MAX_TRY =~ ^[[:digit:]]+$ ]] || MAX_TRY=${1/-t/}
				;;
			-a | --all)
				#+option
				#short: -a
				#long: --all
				#text: Download all results. implies -n
				#-option
				DOWNLOAD_ALL=true
				NOBREAK=true
				NORESET=true
				unset RES_LIST FILE_LIST_RANGE
				;;
			-q | --queue)
				#+option
				#short: -q
				#long: --queue
				#text: Add selected results to download queue. implies -n
				#-option
				NOBREAK=true
				NORESET=true
				UPDATE_QUEUE=true
				;;
			-nr | --no-reset)
				#+option
				#short: -nr
				#long: --no-reset
				#text: Don't reset terminal on selection download.
				#-option
				NORESET=true
				;;
			-F[[:alpha:]]* | --force=*)
				#+option
				#short: -F
				#long: --force
				#text: Force subbed or dubbed.
				#args: sub, dub
				#-option
				FORCE=${1##*=}
				[[ $FORCE =~ ^[ds]ub$ ]] || FORCE=${1/-F/}
				;;
			-F | --force)
				FORCE=$2
				shift 1
				if [ -z "$FORCE" ]; then
					FORCE=${TYPE_ANIME:0:3}
				fi
				;;
			-d | --dry-run)
				SKIP_DOWNLOAD=true
				;;
			-S | --sub | -D | --dub)
				#+option
				#short: -S
				#short: -D
				#long: --sub
				#long: --dub
				#IDNT: 1
				#text: Prefer subbed/dubbed for downloading.
				#-option
				PREFERRED_TR=$(echo "$1" | tr -d - | cut -c1 | tr '[:upper:]' '[:lower:]')ub
				;;
			-[[:alnum:]]?? | --[[:alnum:]]*)
				echo "Invalid option -- $1" 1>&2
				exit 1
				;;
			*)
				SEARCHSTR="$(echo "$SEARCHSTR $1" | sed 's|^ *||g;s|* $||g')"
				;;
		esac
		shift
	done
	if [[ -n $TYPE_ANIME ]] && {
		[[ $TYPE_ANIME = subbed                           ]] || [[ $TYPE_ANIME = dubbed ]]
	}; then
		tr=$TYPE_ANIME
	else
		tr="$(echo "$@" | sed 'y/০১২৩৪৫৬৭৮৯/0123456789/' | sed 's| |\n|g' | grep -E '^sub$' || echo dub)bed"
	fi
	if {
		[[ -n "$FILE_LIST_RANGE"   ]] || [[ -n "$RES_LIST" ]]
	}                                                          && $DOWNLOAD_ALL; then
		DOWNLOAD_ALL=false
		echo -e "Warning: --all/-a option can only be used when no\n\tselection or episode limit specified.\n\tDisabling autodownload mode"
	fi
	[[ -n $FORCE ]] && echo "${FORCE} enforced."
	if [[ $SEARCHSTR != '' ]] || ${DO_UPDATE:-false} || ${DO_UPDATE_LIST:-false}; then
		python3 -c 'from sys import argv, stdout
import requests, os
from http.cookiejar import MozillaCookieJar as MCJ
from lxml import html

cookiesFile = os.environ["HOME"] + "/.da-cookies.txt"

try:
	cj = MCJ(cookiesFile)
	if os.path.exists(cookiesFile):
		cj.load(ignore_discard=True, ignore_expires=True)

	r = requests.Session()
	r.cookies = cj
	r.headers.update({"user-agent": "'"$USER_AGENT"'"})
	html.fromstring(r.get("https://ww5.dubbedanime.net/").text).get_element_by_id("logo")
except:
	print("Update hijacked cookies in \"~/.da-cookies.txt\"")
	exit(1)' || exit
		if [ -n "$NC" ] || check_up_server dubbedanime.net "${RSOLV:-1}"; then
			if [ -x "${0%/*}/dubbedanime.scrap" ] && ${LOGGED_IN:-false}; then
				"${0%/*}/dubbedanime.scrap"
				trap 'close_bus' SIGINT SIGTERM ERR EXIT
				close_bus()
				{
					ret=$?
					gdbus call --session --dest local.dubbedanime --object-path /scrapper --method local.this.scrapper.quit &> /dev/null
					exit $ret
				}
			fi
			if ${DO_UPDATE:-false} || ${DO_UPDATE_LIST:-false}; then
				da_update
				exit
			fi
			if [ -n "$FILE_LIST_RANGE" ] && ! validate_limit "$FILE_LIST_RANGE"; then
				echo "$(
					tput setaf 1
					tput dim
				)Invalid limit:$FILE_LIST_RANGE$(tput sgr0)" > /dev/stderr
				exit 1
			fi
			da_search "$SEARCHSTR"
			exit $?
		else
			echo Request timed out
			exit 5
		fi
	else
		danime_help
		exit 1
	fi
else
	danime_help
	exit 1
fi
#end:code
