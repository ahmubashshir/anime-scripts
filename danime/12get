#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2015
# shellcheck disable=SC2143
# shellcheck disable=SC2001
((def_get)) && return 0 || def_get=1
. libbash
. spinner
DEBUG=${DEBUG:-false}
sp=$sp31
SPINNER_DELAY=0.04
. 13download
. 10db
. 01include
#start:code
da_get_len()
{
	local series type
	series="$1"
	if [ "$series" = "" ]; then
		return 3
	fi
	type=$(da_db get type)
	curl --config /dev/null "${CURL_OPTIONS[@]}" -ksL "https://ww5.dubbedanime.net/$series" | case $type in
		null | 0)
			xmllint --html --nowarning --xpath '//*[@id="jump-episode"]/li/a/@href' - 2> /dev/null | wc -l
			;;
		subbed | dubbed)
			xmllint --html --nowarning --xpath '//ul[@id="jump-episode"]/li[@data-'$type'="true" or @data-'${type:0:3}'="true"]/a/@href' - 2> /dev/null | wc -l
			;;
		*)
			return 1
			;;
	esac
}
da_get()
{
	local series TITLE id ep_slug query
	unset null_ep_count da_page da_page_json baseurl url epc ep
	series="$1"
	TITLE="$2"
	id="$3"
	if [ "$series" = "" ]; then
		return 3
	fi
	query="$4"
	local ep_progress total_pw
	if [ -f ".type" ]; then
		FORCE="$(< .type)"
	fi
	start_spinner "Fetching \"$id\" info"
	da_page=$(curl --config /dev/null "${CURL_OPTIONS[@]}" -ksL "https://ww5.dubbedanime.net/$series")
	da_page_json=$(echo "$da_page" | grep -E '(let|var) anime' | cut -d= -f2- | cut -d\  -f2- | sed 's/\;$//g' | jq)
	baseurl=$(echo "$da_page" | xmllint --html --nowarning --xpath '//ul[@id="jump-episode"]/node()' - 2> /dev/null | awk '/<li/,/li>/{printf $0;if (++o%3 == 0) print ""}' | while read -rs xml_node; do echo -e "$xml_node" | xmllint --html --nowarning --xpath 'concat("href=",//a/@href,";subbed=",//li/@data-subbed="true" or //li/@data-sub="true",";dubbed=",//li/@data-dubbed="true" or //li/@data-dub="true"," ")' -; done | tr -s ' ' \\n | tac)
	stop_spinner "$([[ -n $baseurl ]] && echo 0 || echo 1)"
	if ! {
		da_db has && ${FILE_LIST:-false}
	} && [ -z "$FILE_LIST_RANGE" ]; then
		da_db add
	fi
	da_db set path "\"$PWD\""
	da_db set url "\"$series\""
	da_db set title "\"$TITLE\""

	if [[ -n $query ]]; then
		da_db set query "\"$query\""
	fi

	$NORESET || reset
	${DEBUG:-false} && set -x
	vbar "$(ellipsis $(($(tput cols) - 10)) "$TITLE")" true
	[[ -z $baseurl ]] && echo "$(
		tput setaf 1
		tput dim
	)No episode is available to download yet.$(tput sgr0)" 1>&2 && exit 1
	if [[ -n ${PREFERRED_TR:-dub} ]] && [[ -z $FORCE ]]; then
		tr="$(
			(
				echo "$baseurl" | grep -q "${PREFERRED_TR:-dub}bed=true" && echo ${PREFERRED_TR:-dub}
			) || (
				echo "$baseurl" | tr \; \\n | grep "$(echo -e 'dub\nsub' | grep -v ${PREFERRED_TR:-dub})bed=true$" | sort -u | cut -d= -f1 | cut -c1-3
			) || (
				echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1 | cut -c1-3
			)
		)bed"
	elif [[ -n $FORCE ]]; then
		tr=${FORCE:0:3}bed
	elif [ "$(echo "$baseurl" | grep dubbed=true | tr -d '[:space:]')" != "" ]; then
		tr=dubbed
	elif [ "$(echo "$baseurl" | grep subbed=true | tr -d "[:space:]")" != "" ]; then
		tr=$(echo "$baseurl" | tr \; \\n | grep '=true$' | sort -u | cut -d= -f1)
	fi
	da_db set type "\"$tr\""
	url="$(echo "$baseurl" | grep "$tr=true" | cut -d\; -f1 | awk "{print \$0\"-english-$tr\";}")"
	if ! (echo "$url" | grep -q "${tr}$"); then
		echo "$(
			tput setaf 1
			tput dim
		)\"$(ellipsis 38 "$TITLE")\" doesn't have any ${tr} episode yet.$(tput sgr0)" 1>&2
		if ! find . -name '*.mp4' | grep -q '\.mp4$'; then
			cd ..
			rm -rf "$OLDPWD"
		fi
		if da_db has; then
			da_db del
		fi
		return 1
	fi
	url="$(echo "$url" | grep ^href | cut -d= -f2)"
	for k in $url; do
		if [ "$(echo "${k##*/}" | cut -d- -f1)" -gt "$(echo "$url" | grep "${k#*-}" | head -1 | xargs basename | cut -d- -f1)" ]; then
			url="${url//$k/${k//-episode-/-extra-}}"
		fi
	done
	url="$(echo "$url" | sed 's/^\///g')"
	${DEBUG:-false} && set -x
	epc=$(echo "$url" | wc -l)
	da_db set total "$(echo "$da_page_json" | jq -re .total | awk '{print ($0 == "null" || $0 == "0")?"'$((epc + 1))'":$0;}')"
	${UPDATE_QUEUE:-false} && {
		echo "Appending to queue."
		return 0
	}
	if ${FILE_LIST:-false} && [[ -z $FILE_LIST_RANGE ]]; then
		vbar "ID:$id Type:${tr:-dubbed} Files:$epc"
		read -eri "1-$epc" -p$'Episode list: ' FILE_LIST_RANGE
		ep="$(echo "${FILE_LIST_RANGE:-1-}" | num_unicode2ascii)"
		tput cuu 2
	fi
	if ${CONTINUE-false} && [[ -z $FILE_LIST_RANGE ]] && [[ -n "$(da_db get saved | awk '{print ($0 == "null" || $0 == "0")?"1-":$0"-";}')" ]]; then
		FILE_LIST_RANGE="$(da_db get saved | awk '{print ($0 == "null" || $0 == "0")?"1-":$0"-";}')"
	fi
	FILE_LIST_RANGE="$(echo "$FILE_LIST_RANGE" | sed 's/^[-,[:blank:]]*//g')"
	if [[ $FILE_LIST_RANGE =~ [[:digit:],]+-[[:digit:],]+ ]]; then
		ep_show="range($(ellipsis "$(($(tput cols) - 50))" "$(echo "$FILE_LIST_RANGE" | tr -d \ )"))"
		dl_notify="Episodes in ${ep_show} are"
	elif [[ $FILE_LIST_RANGE =~ [[:digit:],]+- ]]; then
		ep_show="range($FILE_LIST_RANGE$(echo "$url" | wc -l))"
		dl_notify="Episodes in ${ep_show} are"
	elif [[ -n $FILE_LIST_RANGE ]]; then
		ep_show="file $FILE_LIST_RANGE"
		dl_notify="Episode ${ep_show:5} is"
	fi
	if [ -n "$FORCE" ]; then
		echo "${FORCE:0:3}" > .type
	fi
	${DEBUG:-false} && set +x
	${SKIP_DOWNLOAD:-false} || anime_cover "https://cdn.animeapi.com/images/${1%%-*}.jpg" &
	ep=$(expand_limit "${FILE_LIST_RANGE:-1-}" "$epc")
	if [ "$(echo $ep | tr \  \\n | wc -l)" -eq 2 ]; then
		ep_show="file ${ep%% *} and ${ep##* } "
		dl_notify="Episode ${ep_show}are"
	elif [ "$(echo $ep | tr \  \\n | wc -l)" -eq 1 ]; then
		ep_show="file $ep "
		dl_notify="Episode ${ep_show:5}is"
	fi
	if [[ -n $ep ]] && [[ -n $ep_show ]]; then
		vbar "ID:$id Type:${tr:-dubbed}"
		vbar " Files:$epc Downloading:$ep_show "
	else
		vbar "ID:$id Files:$epc Type:${tr:-dubbed}"
	fi
	total_pw=$(echo "$ep" | tr \  \\n | wc -l)
	${DEBUG:-false} && set -x
	for k in $ep; do
		ep_slug="$(
			echo "$url" |
				head -n "$k" |
				tail -1
		)"
		((ep_progress += 1))
		(
			echo ":$DA_IGNORE_EP:" |
				grep -q ":$(
					echo "$ep_slug" |
						cut -d- -f1 |
						xargs basename
				):"
		) && {
			vbar "skipping $(echo "$ep_slug" | cut -d- -f1)"
			continue
		}
		da_get_episede "$ep_slug" "$k" "$epc" "$ep_progress" "$total_pw"
		if ! (exit $?); then
			echo "Failed to download $k"
			[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url" | head -n "$k" | tail -1)\">file $k</a>"
			${BREAK:-true} && break
		fi
	done
	if da_db has && [ "$(da_db get saved)" -ge "$(da_db get total)" ]; then
		da_db del
	fi
	[[ $DISPLAY != '' ]] && notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "<b>$TITLE</b>\n${dl_notify} downloaded"
}
#end:code
if ! ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
	[[ -n $BASH_VERSION ]] && (return 0 2> /dev/null)); then
	da_get "$@"
fi
