#!/bin/bash
. 00header
. 01include
. 02help
. 11search
. 12get
. 13download
. 14parse
DEBUG=${DEBUG:-false}
#start:code
if [[ $# != 0 ]] && [[ $1 != latest ]]; then
	while [ -n "$1" ]; do
		case $1 in
			-v | --version)
				#+option
					#short: -v
					#long: --version
					#text: Show version and license.
				#-option
				if [ "${0##*/}" = "35footer" ]; then
					echo " danime  master-$(git rev-parse HEAD | cut -c 1-6)"
				else
					echo " danime  dist-$(grep '^#VERSION_INFO=' "$0" | cut -d= -f2)"
				fi
				echo
				echo
				da_get_license
				exit 0
				;;
			-l | --license)
				#+option
					#short: -l
					#long: --license
					#text: Show license.
				#-option
				if [ -e "LICENSE" ] && [ "$(head -1 LICENSE | tr -d '[:blank:]')" = "GNUGENERALPUBLICLICENSE" ]; then
					da_get_license true
					echo
					echo "See 'LICENSE' for more details."
				else
					da_get_license
				fi
				exit 0
				;;
			-i| --id)
				#+option
					#short: -i
					#long: --id
					#args: id1[,id2[,...]]
					#text: Prefer these ids to download if available.
				#-option
				PREFERRED_HOSTS="${PREFERRED_HOSTS:-null}\|${2//,/|}"
				shift
			;;
			--id=[[:alnum:].,]*)
				tmp="${1##*=}"
				PREFERRED_HOSTS="${PREFERRED_HOSTS:-null}\|${tmp//,/|}"
				unset tmp
			;;
			--list-mirror)
				#+option
					#long: --list-mirror
					#text: List supported mirrors
				#-option
				echo Supported Mirrors
				echo -e "\t${SUPPORTED_HOSTS//\\|/ }"
				exit 0
				;;
			-m | --mirror)
				#+option
					#short: -m
					#long: --mirror
					#args: mirror1[,mirror2[,...]]
					#text: select preferred mirrors.
				#-option
				if echo "${SUPPORTED_HOSTS//\\|/$'\n'}" | grep -q "${2//,/\\|}"; then
					PREFERRED_HOSTS="${PREFERRED_HOSTS:-null}\|${2//,/|}"
				fi
				shift
				;;
			--mirror=[[:alnum:].,]*)
				tmp="${1##*=}"
				if echo "${SUPPORTED_HOSTS//\\|/$'\n'}" | grep -q "${tmp//,/\\|}"; then
					PREFERRED_HOSTS="${PREFERRED_HOSTS:-null}\|${tmp//,/|}"
				fi
				unset tmp
				;;
			--break | -b)
				#+option
					#short: -b
					#long: --break
					#text: break on error
				#-option
				BREAK=true
				;;
			-nb|--no-break)
				#+option
					#short: -nb
					#long: --no-break
					#text: don't break on error
				#-option
				BREAK=false
				;;
			-B[[:digit:].]*[kKmM] | --block=[[:digit:].]*[kKmM])
				#+option
					#short: -B
					#long: --block
					#args: <block size>
					#text: set block size for testing.(allowed suffixes: kM)
				#-option
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]] || BS=${1/-B/}
				BS=$(echo "$BS" | byte_mr)
				;;
			-B[[:digit:].]* | --block=[[:digit:].]*)
				BS=${1#*=}
				[[ $BS =~ ^[[:digit:].]+$ ]] || BS=${1/-B/}
				;;
			-B | --block)
				BS=$2
				if [[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]]; then
					BS=$(echo "$BS" | byte_mr)
					shift
				else
					echo "Invalid block size." 1>&2
				fi
				;;
			--debug)
				#+option
					#long: --debug
					#text: enable debug mode
				#-option
				DEBUG=true
				;;
			-A)
				#+option
					#short: -A
					#IDNT: 3
					#text: Set search type to Anime(default).
				#-option
				TYPE=anime
				;;
			-C)
				#+option
					#short: -C
					#IDNT: 3
					#text: Set search type to Cartoon.
				#-option
				TYPE=cartoon
				;;
			-c | --continue)
				#+option
					#short: -c
					#long: --continue
					#text: Reload previous episode selection.
				#-option
				CONTINUE=true
			;;
			-nc | --no-continue)
				#+option
					#short: -n
					#long: --no-continue
					#IDNT: 1
					#text: Don't Reload previous episode selection.
				#-option
				CONTINUE=false
			;;
			-n | --no-break-or-reset)
				#+option
					#short: -N
					#long: --no-break-or-reset
					#IDNT: 1
					#text: equivalent to -nb -nr.
				#-option
				NOBREAK=true
				NORESET=true
				;;
			-R | --reset)
				#+option
					#short: -R
					#long: --reset
					#text: Clear screen on selection change.
				#-option
				NORESET=false
			;;
			-r | --replace)
				#+option
					#short: -r
					#long: --replace
					#args: manual, fail
					#text: Replace unmatched episode.
				#-option
				if echo "$2" | grep -q 'manual\|fail'; then
					eval "REPLACE_$(echo "$2" | tr '[:lower:]' '[:upper:]')=true"
					shift
				else
					REPLACE_FAIL=true
					REPLACE_MANUAL=true
				fi
				;;
			-r[fm] | --replace=fail | --replace=manual)
				REPLACE="$(echo "${1#*=}" | tr '[:lower:]' '[:upper:]')"
				if ! echo "$REPLACE" | grep -qi 'manual\|fail'; then
					REPLACE="$(
						if [ "${1/-r/}" = "m" ]; then
							echo manual
						else
							echo fail
						fi | tr '[:lower:]' '[:upper:]'
					)"
				fi
				eval "REPLACE_$REPLACE=true"
				unset REPLACE
				;;
			-e | --ep-list)
				#+option
					#short: -e
					#long: --ep-list
					#args: [ep-index-list]
					#text: select episodes to download
				#-option
				EP_LIST=true
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					EP_LIST_RANGE=${2}
					shift
				fi
				;;
			-e[[:digit:],-]* | --ep-list=[[:digit:],-]*)
				EP_LIST=true
				EP_LIST_RANGE=${1#*=}
				# EP_LIST_RANGE=${EP_LIST_RANGE// /}
				[[ $EP_LIST_RANGE =~ ^[[:digit:],-]+$ ]] || EP_LIST_RANGE=${1/-e/}
				EP_LIST_RANGE=$(echo "$EP_LIST_RANGE" | grep -o . | grep '^[[:digit:],-]*$' | tr -d \\n | sed 's/,$//')
				;;
			-s | --select)
				#+option
					#short: -s
					#long: --select
					#args: [result-index]
					#text: Select search results.
				#-option
				if [[ $2 =~ ^[[:digit:],-]+$ ]]; then
					RES_LIST=$2
					shift
				else
					echo "Invalid selection index." 1>&2
					exit 1
				fi
				;;
			-s[[:digit:],-]* | --select=[[:digit:],-]*)
				RES_LIST=${1#*=}
				[[ $RES_LIST =~ ^[[:digit:],-]+$ ]] || RES_LIST=${1/-s/}
				;;
			-u|--update)
				#+option
					#short: -u
					#long: --update
					#text: Update and continue incomplete downloads.
				#-option
				DO_UPDATE=true
			;;
			-h | --help)
				#+option
					#short: -h
					#long: --help
					#text: Show help
				#-option
				danime_help
				exit 0
				;;
			-T[[:digit:]]* | --timeout=[[:digit:]]*)
				RSOLV=${1#*=}
				[[ $RSOLV =~ ^[[:digit:]]+$ ]] || RSOLV=${1/-T/}
				;;
			-T | --timeout)
				#+option
					#short: -T
					#long: --timeout
					#text: Set timeout for requests.
				#-option
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					RSOLV=${2}
					shift
				else
					echo Invalid argument.
					exit 1
				fi
				;;
			-t | --try)
				#+option
					#short: -t
					#long: --try
					#args: n
					#text: set retry attempts
				#-option
				if [[ ${2} =~ ^[[:digit:],-]+$ ]]; then
					MAX_TRY=${2}
					shift
				else
					echo Invalid argument.
					exit 1
				fi
			;;
			-t[[:digit:]]* | --try=[[:digit:]]* )
				MAX_TRY=${1#*=}
				[[ $MAX_TRY =~ ^[[:digit:]]+$ ]] || MAX_TRY=${1/-t/}
			;;
			-a | --all)
				#+option
					#short: -a
					#long: --all
					#text: Download all results.
				#-option
				DOWNLOAD_ALL=true
				unset RES_LIST EP_LIST_RANGE
				;;
			-nr | --no-reset)
				#+option
					#short: -nr
					#long: --no-reset
					#text: Don't reset terminal on selection download.
				#-option
				NORESET=true
				;;
			-f[[:alpha:]]* | --force=*)
				#+option
					#short: -f
					#long: --force
					#args: sub, dub
					#text: Force subbed or dubbed.
				#-option
				FORCE=${1##*=}
				[[ $FORCE =~ ^[ds]ub$ ]] || FORCE=${1/-f/}
				;;
			-f | --force)
				FORCE=$2
				shift 1
				if [ -z "$FORCE" ]; then
					FORCE=${TYPE_ANIME:0:3}
				fi
				;;
			-d | --dry-run)
				SKIP_DOWNLOAD=true
				;;
			-S | --sub | -D | --dub)
				#+option
					#short: -S
					#short: -D
					#long: --sub
					#long: --dub
					#IDNT: 1
					#text: Prefer subbed/dubbed for downloading.
				#-option
				PREFERRED_TR=$(echo "$1" | tr -d - | cut -c1 | tr '[:upper:]' '[:lower:]')ub
				;;
			-[[:alnum:]]?? | --[[:alnum:]]*)
				echo "Invalid option -- $1" 1>&2
				exit 1
				;;
			*)
				SEARCHSTR="$(echo "$SEARCHSTR $1" | sed 's|^ *||g;s|* $||g')"
				;;
		esac
		shift
	done
	PREFERRED_HOSTS="${PREFERRED_HOSTS//null\\\|/}"
	if [[ -n $TYPE_ANIME ]] && { [[ $TYPE_ANIME = subbed ]] || [[ $TYPE_ANIME = dubbed ]] ; }; then
		tr=$TYPE_ANIME
	else
		tr="$(echo "$@" | sed 'y/০১২৩৪৫৬৭৮৯/0123456789/' | sed 's| |\n|g' | grep -E '^sub$' || echo dub)bed"
	fi
	if { [[ -n "$EP_LIST_RANGE" ]] || [[ -n "$RES_LIST" ]] ; } && $DOWNLOAD_ALL; then
		DOWNLOAD_ALL=false
		echo -e "Warning: --all/-a option can only be used when no\n\tselection or episode limit specified.\n\tDisabling autodownload mode"
	fi
	[[ -n $FORCE ]] && echo "${FORCE} enforced."
	if [[ $SEARCHSTR != '' ]] || ${DO_UPDATE:-false} ; then
		if [ -n "$NC" ] || check_up_server dubbedanime.net "${RSOLV:-1}"; then
			if ${DO_UPDATE:-false};then
				da_update
				exit
			fi
			if [ -n "$EP_LIST_RANGE" ] && ! validate_limit "$EP_LIST_RANGE"; then
				echo "$(
					tput setaf 1
					tput dim
				)Invalid limit:$EP_LIST_RANGE$(tput sgr0)" > /dev/stderr
				exit 1
			fi
			da_search "$SEARCHSTR"
			exit $?
		else
			echo Request timed out
			exit 5
		fi
	else
		danime_help
		exit 1
	fi
elif [[ $1 == latest ]]; then
	#fetch_letest
	true
else
	danime_help
	exit 1
fi
#end:code
