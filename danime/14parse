#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090

. libbash
. spinner
. 01include
DEBUG=${DEBUG:-false}
#start:code
SUPPORTED_HOSTS='mp4upload\|mp4.sh\|trollvid\|vidstreaming\|xstreamcdn'
get_effective_url()
{
	xargs curl -ILksXGET -o /dev/null -w '%{url_effective}\n' 2>/dev/null| grep '^http'
}
get_url() {
	local ep_file_host ep_file_id n
	ep_file_host=$(echo "$@" | jq -r '.host')
	ep_file_id=$(echo "$@" | jq -r '.id' | xargs basename -a)
	ep_url=$(echo "$@" | jq -r '.url' | grep -wv 'null')
	if ! { echo "$SUPPORTED_HOSTS" | grep -q "$ep_file_host"; }; then
		echo "unimplemented:$ep_file_host"
		return 1
	fi
	for n in $ep_file_id; do
		if [ -n "$(type -t ${ep_file_host}:get_url || type -w ${ep_file_host}:get_url)" ]; then
			${ep_file_host}:get_url "${n}" "$ep_url"
		else
			echo "unimplemented:${ep_file_host/_/.}"
			break
		fi
	done
}

mp4upload:get_url() {
	curl -ks "https://www.mp4upload.com/embed-$1.html" | grep 'eval(' | cut -d\> -f2- | js-beautify -xn -e \\n -k --brace-style=expand - 2> /dev/null | tr -d \",\ \)\; | grep '^src' | cut -d: -f2-
}

xstreamcdn:get_url() {
	curl -sX POST "https://www.xstreamcdn.com/api/source/$1" --data "r=https://www.xstreamcdn.com/f/$1" --data 'd=www.xstreamcdn.com' | jq -r 'select(.success == true).data[0].file' 2> /dev/null|get_effective_url
}

trollvid:get_url() {
	#exec 2>/tmp/out.${CALLED_FROM_MP4_SH:-false}
	if [ -f ~/.da-cookies.txt ];then
		curl -o /dev/null -w '%{url_effective}\n' -sLIXGET "${CURL_OPTIONS[@]}" "https://ww5.dubbedanime.net/download/$(echo $2|xargs basename|cut -d- -f1)/$1"
	else
		set "$1" "$(curl -H "referer: https://ww5.dubbedanime.net/$TYPE/$(da_db get url)" "${CURL_OPTIONS[@]}" -Lks "$2" | grep -E "(var|let) (xToken|xuath)" | sed -E "s/.* = '"'\?x=(.*)'"'.*/\1/")"
		#set -x
		curl "https://mp4.sh/download/$1?x=$2" \
		-H 'authority: mp4.sh' \
		-H 'pragma: no-cache' \
		-H 'cache-control: no-cache' \
		-H 'upgrade-insecure-requests: 1' \
		-H 'user-agent: '"$USER_AGENT" \
		-H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \
		-H 'sec-fetch-site: none' \
		-H 'sec-fetch-mode: navigate' \
		-H 'sec-fetch-user: ?1' \
		-H 'sec-fetch-dest: document' \
		-H 'accept-language: en-US,en;q=0.9,bn;q=0.8,ar;q=0.7' \
		-H 'cookie: __cfduid=d5e25eb2c3a9e01d99994e1004d5330971600289507; _gaid=59277e8785243a92a61db5942548a251' \
		--compressed
	fi
}

mp4.sh:get_url() {
	CALLED_FROM_MP4_SH=true trollvid:get_url "$@"
}

vidstreaming:get_url() {
	curl -s "https://vidstreaming.io/streaming.php?id=$1" | sed -n '/data-video=".*\/v\//{s/.*data-video="\(.*\)\/v\/\(.*\)".*/\1\/api\/source\/\2/;p}' | xargs curl -X POST -s 2>/dev/null| jq -r 'select(.success == true).data[0].file'|get_effective_url
}

#end:code
if ! { [[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || { [[ -n $BASH_VERSION ]] || [[ $0 =~ bin/bashdb$ ]]; } && { return 0 2> /dev/null ;};}; then
	(($#==3)) || exit
	remote=$1;shift
	$remote:get_url "$@"
fi
