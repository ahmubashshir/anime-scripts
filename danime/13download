#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2143
# shellcheck disable=SC2119
# shellcheck disable=SC2032
((def_download)) && return 0 || def_download=1
source libbash
source spinner
sp=$sp31
SPINNER_DELAY=0.04
. 14parse
. 01include
. 10db
DEBUG=${DEBUG:-false}
#start:code
da_read_ep_json()
{
	cat | {
		jq -Mc '.videos[]|del(.date)'
		curl --disable -H "referer: $page_url" "${CURL_OPTIONS[@]}" -Lks "https://vid.xngine.com/api/episode/$2" 2> /dev/null | jq -Mc '.[]' 2> /dev/null
	} | jq -Mc 'select(has("id") and (.host|test("'$SUPPORTED_HOSTS'")) )' | eval "$1"
}
get_mapped()
{
	python3 -c 'import yaml
import requests as r
from sys import argv, exit
try:
	with open("maps.yml") as file:
		maps = yaml.load(file, Loader=yaml.FullLoader)
except FileNotFoundError:
	exit(0)

if len(argv) == 2:
	ep=int(argv[1])
	if ep in maps["eps"].keys():
		data = r.get(maps["api"]%maps["eps"][ep])
		if data.ok:
			json = data.json()
		else:
			exit(0)
		for n in ["source", "source_bk"]:
			if n in json.keys():
				print(next(k["file"] for k in json[n]))
				exit(0)' "$@"
}
da_get_episede()
{
	tr=${1##*-}
	if (($# == 0)); then
		return 1
	else
		local IFS file_num ret progress total_pw ep_number ep_title current_ep page_url try_page=0
		current_ep=$2
		progress=$4
		total_pw=$5
		local tr="$tr"
		IFS=$'\n'
		start_spinner "Fetching info about episode[id:$(echo "${1%%-*}" | xargs basename)]"
		${DEBUG:-false} && set -x
		if ! [[ $1 =~ ^http* ]]; then
			local d
			d=$1
			shift
			set "https://1anime.to/$d" "$@"
			page_url="https://1anime.to/${d%%-*}"
			unset d
		fi
		while [[ 
			"$(
				echo "$parse_episode_page" \
					| xmllint --html --xmlout --xpath \
						'string((//head/meta[@property="og:url"])[1]/@content)' - 2> /dev/null
			)" != "$1" ]] \
			&& ((try_page++ < 5)); do
			parse_episode_page="$(
				curl --disable \
					-H "referer: https://1anime.to$(da_db get url)" \
					"${CURL_OPTIONS[@]}" -Lks "${PUPPETEER_PROXY}$1" \
					| grep -E '(var|let) episode'
			)"
			((try_page > 1)) && sleep 1
		done
		if [ -z "$parse_episode_page" ]; then
			try_page=0
			while [[ 
				"$(
					echo "$parse_episode_page" \
						| xmllint --html --xmlout --xpath \
							'string((//head/meta[@property="og:url"])[1]/@content)' - 2> /dev/null
				)" != "$page_url" ]] \
				&& ((try_page++ < 5)); do
				parse_episode_page="$(
					curl --disable \
						-H "referer: https://1anime.to$(da_db get url)" \
						"${CURL_OPTIONS[@]}" -Lks \
						"${PUPPETEER_PROXY}$page_url" \
						| grep -E '(var|let) episode'
				)"
				((try_page > 1)) && sleep 1
			done
			shift
			set "$page_url" "$@"
		fi
		unset page_url
		parse_episode_page="$(
			echo "$parse_episode_page" \
				| cut -d= -f2- \
				| sed 's/\;$//g;s/^[[:blank:]]*//g' \
				| head -1
		)"
		if echo "$tr" | grep -qvw 'dub\|sub'; then
			tr=dub
		fi
		if [[ $tr = dub ]] || [[ $tr = sub ]]; then
			filter="grep '\"type\":\s*\"${tr}\(bed\|\)\"'"
		else
			filter="cat"
		fi
		if [ -z "$parse_episode_page" ]; then
			stop_spinner 1
			echo Episode not available.
			${NOBREAK:-false} && return 0 || return 1
		fi
		ep_title=$(echo "$parse_episode_page" | jq -r '.name.default')
		local ep_number
		ep_number=$(echo "$parse_episode_page" | jq -r '.number')
		if [ "$ep_number" = "null" ]; then
			ep_number=$(
				echo "$parse_episode_page" \
					| jq -r '.name.default' \
					| rev \
					| cut -d' ' -f1 \
					| rev
			)
			if ! [[ $ep_number =~ ^[[:digit:].]+$ ]]; then
				((null_ep_count += 1))
				ep_number=${null_ep_count}n
				# shellcheck disable=SC2001
				ep_title="$(echo "$ep_title" | sed 's|episode|special|gI') ${ep_number}"
				export null_ep_count
			fi
		fi
		ep_title=${ep_title% *}
		if [ "${ep_title% *}" = "${ep_title##* }" ]; then
			ep_title="$TITLE $ep_title"
		elif [[ "${ep_title% *}" =~ ${ep_title##* }$ ]]; then
			ep_title="$(echo "$ep_title" | tr ' ' $'\n' | head -n -1 | xargs echo)"
		fi
		ep_title="${ep_title% *} $(
			echo "${ep_title##* } $ep_number" \
				| sed 's|episode|ep|gI;s|ova|ova|gI;s|ona|ona|gI;s|movie|movie|gI;s|special|special|gI' \
				| sed -E 's/(ova|ona|special)/\1 ep/gI'
		)"
		ep_title="$(echo "$ep_title" | sed 's| *$||g;s|^ *||g')"
		slug=$(
			echo "$parse_episode_page" \
				| jq -r '.slug' \
				| sed "s/\(-episode-\)/$([[ ${tr:0:1} == d ]] && echo -${tr:0:3})\1/"
		)
		ep_id_list=$(
			echo "$parse_episode_page" \
				| da_read_ep_json "$filter" "$slug"
		)
		if [ -z "$ep_id_list" ]; then
			tr=sub
			slug=$(
				echo "$parse_episode_page" \
					| jq -r '.slug'
			)
			ep_id_list=$(echo "$parse_episode_page" | da_read_ep_json "$filter" "$slug")
		fi
		if echo "$1" | grep -q "-extra-[[:digit:]]*-english-${tr}bed$"; then
			ep_title="${ep_title// ep / extra }"
		fi
		ep_file_name="$(echo "$ep_title" | replace_invalid)-${tr}bed.mp4"
		ep_id_list="$(
			echo "$ep_id_list" \
				| awk -e '!seen[$0]++' \
				| awk \
					'/'"${PREFERRED_HOSTS//,/|}"'/{
						print
					}
					!/'"${PREFERRED_HOSTS//,/|}"'/{
						lines[a++]=$0
					}
					END {
						for(i in lines)
							print lines[i]
					}'
		)"
		set +x
		if [ -n "$parse_episode_page" ] && [ -n "$ep_title" ]; then
			stop_spinner 0
		else
			stop_spinner 1
			return 1
		fi
		ep_title=$(ellipsis $(($(tput cols) - 8)) "$ep_title")
		vbar
		vbar "$ep_title" true
		vbar "ID:$(echo "$1" | rev | cut -d/ -f1 | rev | cut -d- -f1)$([ -n "$progress" ] && [ -n "$total_pw" ] && echo " - Progress:$progress/$total_pw")"
		vbar
		if [ "$(echo "$ep_id_list" | wc -l)" -eq 1 ] && [ -z "$REPLACE_FAIL" ]; then
			REPLACE_FAIL=true
		elif [ "$(echo "$ep_id_list" | wc -l)" -gt 1 ] && [ -z "$REPLACE_FAIL" ]; then
			REPLACE_FAIL=false
		fi
		${DEBUG:-false} && set -x
		for n in $ep_id_list; do
			if [ -n "$_sp_pid" ]; then
				stop_spinner 1
			fi
			ep_file_url=
			ep_file_host=$(echo "$n" | jq -r '.host')
			ep_file_id=$(echo "$n" | jq -r '.id' | xargs basename -a 2> /dev/null)
			[ -z "$ep_file_id" ] && continue
			set +x
			start_spinner "Getting url from provider[$ep_file_host:$(ellipsis 15 "$ep_file_id")]"
			${DEBUG:-false} && set -x
			ep_file_url=$(get_url "$n" "$1")
			if [ -z "$ep_file_url" ] && [ "$(echo "$ep_id_list" | wc -l)" -eq 1 ] && [ -f maps.yml ]; then
				ep_file_url=$(get_mapped "$ep_number")
			fi
			for ep_file_url_current in $ep_file_url; do
				if remote_exist "$ep_file_url_current"; then
					continue
				fi
				ep_file_url=
				stop_spinner 1
				continue 2
			done
			if [ -z "$ep_file_url" ]; then
				stop_spinner 1
				continue
			fi
			stop_spinner 0
			if [[ $(echo "$ep_file_url" | wc -l) -gt 1 ]]; then
				file_num=0
			fi
			for ep_file_url_current in $ep_file_url; do
				if [ -n "$file_num" ]; then
					((file_num++))
					ep_file_name="$(echo "$ep_title" | replace_invalid)-part$file_num-${tr}bed.mp4"
				fi
				ep_file_name="${ep_file_name//---/--}"
				if ! {
					[[ $tr = dub ]] || [[ $tr = sub ]]
				}; then
					tr=$(echo "$n" | jq -r '.type')
				fi
				if ${SKIP_DOWNLOAD:-false}; then
					continue
				fi
				compare_episode "$ep_file_name" "$ep_file_url_current"
				ret=$?
				if ((ret == 0)); then
					download "$ep_file_name" "$ep_file_url_current"
				elif ( 
					((ret == 4)) \
						&& (
							${REPLACE_FAIL:-false} || ((${failed_tests:-0} <= 5))
						) && ! ${NO_REPLACE:-false}
				) || ((ret == 5)) || (${REPLACE_MANUAL:-false} && ((ret == 3))); then
					#echo " overwriting"
					rm "$ep_file_name"
					download "$ep_file_name" "$ep_file_url_current"
				else
					echo "File doesn't match."
					continue 2
				fi
			done
			break
		done
	fi
}

download_hls()
{
	(
		set -o pipefail
		trap 'rm -f "$1.part"' EXIT ABRT QUIT INT
		duration=$(
			ffprobe -of compact -show_entries \
				"format=duration" -i "$2" 2> /dev/null \
				| cut -d= -f2
		)
		ffmpeg -y -progress /dev/stdout \
			-i "$2" -f mp4 "$1.part" 2> /dev/null \
			| awk -v "duration=$duration" -F= \
				'/out_time_ms/ {
					progress= $2 / (duration * 1000000)
					cols = 50
					fill = cols * progress
					bar = gensub(/ /,"#","g",sprintf("%" fill "s",""))
					blank = sprintf("%" fill - cols "s","")
					printf "\r%6.2f%% [%s%s]", progress * 100, bar, blank
				}
				END{
					printf "\n"
				}' \
			&& mv "$1.mp4.part" "$1.mp4"
	)
}
download()
{
	local s1 s2 ret tried
	if [[ $2 =~ https://[[:alnum:][:punct:]]*/[[:alnum:][:punct:]]*.m3u8[[:alnum:][:punct:]]* ]]; then
		echo "Downloading '$1'"
		download_hls "$@"
		ret=$?
	else
		s1=$(
			curl --disable --referer "${2}" -kLsIXGET "$2" \
				| awk \
					'/^HTTP\/[12.]+ 200/,/^\r$/ {
						gsub(/\r/,"")
						if( tolower($1) ~ /^content-length:$/) {
							print $2
						}
					}'
		)
		s2=$(stat -Lc%s "$1" 2> /dev/null || echo 0)
		if ((s1 >= s2)); then
			until fget "$2" "$1" --no-check-certificate; do
				ret=$?
				if [[ $ret = 10 ]]; then
					return
				elif ((tried <= ${MAX_TRY:-5})); then
					tput cuu 2
					((tried > 1)) && (
						tput el1
						tput el
						tput cuu1
					)
					tput el1
					tput el
					((tried += 1))
					echo "Retrying...[$tried]"
				else
					break
				fi
			done
		else
			echo "Manually downloaded $1[$(byte_hr "$s2")],skipping."
		fi
	fi
	if ((ret == 0)) || [ "$CHECK_FILE" == "false" ]; then
		da_db set saved "$current_ep"
		return 0
	fi
	start_spinner "Checking $(ellipsis 40 "$1") integrity"
	${DEBUG:-false} && set -x
	if [ -n "$(ffmpeg -v error -map 0:0 -f null - -i "$1" 2>&1 | grep -v '^\[\|^[[:blank:]]')" ] || ((s1 < s2)); then
		stop_spinner 1
		echo "$1 is corrupted"
		return $((ret + 1))
	else
		stop_spinner 0
		da_db set saved "$current_ep"
		return $((ret + $?))
	fi
}
compare_episode()
{
	${SKIP_COMPARE:-false} && return 0
	${DEBUG:-false} && set -x
	local size wsize BS="$BS" hash1 hash2
	if [[ $BS =~ ^[[:digit:].]+[[:digit:]kKmM]$ ]]; then
		BS=$(echo "$BS" | byte_mr)
	else
		BS=524288
	fi
	if [ ! -e "$1" ] || {
		[ -n "$CHECK_FILE" ] && [ "$CHECK_FILE" == "false" ]
	}; then
		return 0
	elif [ "$CHECK_FILE" == "error" ]; then
		return 2
	fi
	size=$(stat -Lc%s "$1")
	if ((${BS:-524288} > size)); then
		BS=$size
	fi
	wsize=$(
		curl --disable -LksIXGET "$2" \
			| awk \
				'/^HTTP\/[12.]+ 200/,/^\r$/ {
					gsub(/\r/,"")
					if( tolower($1) ~ /^content-length:$/) {
						print $2
					}
				}'
	)
	if ((size > wsize)); then
		return 3
	elif ((size == 0)); then
		return 0
	fi
	${DEBUG:-false} && set -x
	if ! (dd if="$1" of=/dev/null bs=1 count=1 status=none 2> /dev/null && exit "$(ffprobe -hide_banner -loglevel 14 "$1" 2>&1 | wc -l)"); then
		return 5
	fi
	if command -v mediainfo &> /dev/null; then
		asize=$(mediainfo "$1" 2> /dev/null | tr -s '[:blank:]' \  | grep -i '^stream size' | sed 's|: |:|g' | cut -d: -f2 | cut -d\  -f1 | awk '{printf $0"*1048576+"};END {printf "0\n"}' | bc | cut -d\. -f1)
	else
		asize=$size
	fi
	if ((asize > wsize)); then
		return 3
	fi
	${DEBUG:-false} && set +x
	failed_tests=${TOTAL_CHECKS:-10}
	IFS=' ' read -ra offsets < <(srand 0 $((size - ${BS:-524288})) $((BS / 2)) "${TOTAL_CHECKS:-10}")
	if [ "${#offsets}" = "0" ]; then
		exit 1
	fi
	for ((i = 0; i < ${TOTAL_CHECKS:-${#offsets}}; i++)); do
		printf "\rComparing episode[test:%d]" "$((i + 1))"
		start=${offsets[$i]}
		hash1="$(dd bs=1 count="${BS:-524288}" status=none if="$1" skip="$start" | sha256sum | cut -d\  -f1)"
		hash2="$(curl --disable -Lskr "$start-$((start + ${BS:-524288} - 1))" "$2" | sha256sum | cut -d\  -f1)"
		test "$hash1" = "$hash2" && failed_tests=$((failed_tests - 1))
		test "$hash1" = "$hash2" || echo -e "\rComparing episode[test:$((i + 1)):fail]"
		test "$hash1" = "$hash2" || return 4
	done
	echo -e "\rComparing episode[test:1-${TOTAL_CHECKS:-${#offsets}}:pass]"
	return 0
}
#end:code
if ! {
	[[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || {
		[[ -n $BASH_VERSION ]] || [[ $0 =~ bin/bashdb$ ]]
	} && {
		return 0 2> /dev/null
	}
}; then
	da_get_episede "$@"
fi
