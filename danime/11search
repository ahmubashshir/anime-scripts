#!/bin/bash
# shellcheck disable=SC2086
# shellcheck disable=SC1091
# shellcheck disable=SC1090
# shellcheck disable=SC1003
# shellcheck disable=SC2034
# shellcheck disable=SC2154
# shellcheck disable=SC2016
# shellcheck disable=SC2015
# shellcheck disable=SC2143
((def_search)) && return 0 || def_search=1
DEBUG=${DEBUG:-false}
. libbash
. spinner
. 01include
. 10db
. 12get
#start:code
da_api_search()
{
	python3 -c '#!/usr/bin/python3
import requests
import json
from sys import argv
import os
from urllib.parse import quote_plus
from http.cookiejar import MozillaCookieJar as MCJ
cookiesFile = "'$HOME'/.local/share/danime/cookies.txt"
cj = MCJ(cookiesFile)
if os.path.exists(cookiesFile):
	cj.load(ignore_discard=True, ignore_expires=True)
r = requests.Session()

r.headers = {
    "authority"			: "ww5.dubbedanime.net",
    "pragma"			: "no-cache",
    "cache-control"		: "no-cache",
    "accept"			: "application/json",
    "x-requested-with"	: "XMLHttpRequest",
    "user-agent"		: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36",
    "origin"			: "https://ww5.dubbedanime.net",
    "sec-fetch-site"	: "same-origin",
    "sec-fetch-mode"	: "cors",
    "sec-fetch-dest"	: "empty",
    "referer"			: "https://ww5.dubbedanime.net/browse-anime?search=%s"%quote_plus(" ".join(argv[1:]))
}

r.cookies = cj

def refine(Str):
	d={
		"<":"ï¼œ",
		">":"ï¼ž",
		":":"êž‰",
		"\"":"ï¼‚",
		"/":"â§¸",
		"\\":"â§¹",
		"?":"ï¼Ÿ",
		"|":"â«¿",
		"*":"ðŸžµ",
	}
	for n in d.keys():
		Str=Str.replace(n,d[n])
	return Str
try:
	if len(argv)>1:
		data = {
			"model"			:	"Anime",
			"size"			:	200,
			"what"			:	"query",
			"letter"		:	"all",
			"query"			:	"search=" + " ".join(argv[1:])
		}
		try:
			for n in r.post("https://ww5.dubbedanime.net/ajax/paginate", data).json()["results"]:
				print("%s:%s:%s:%s"%(n["url"],n["id"],0 if not "total" in n else n["total"],refine(n["title"])))
		except:
			pass
except KeyboardInterrupt:
	pass' "$@" | sed 's@^/@@'

}
da_search()
{
	start_spinner "Searching for $*"
	RES=$(da_api_search "$@")
	if [ -z "$(echo "$RES" | tr -d '[:space:]')" ]; then
		(exit 4)
	fi
	stop_spinner $?
	if [ -z "$(echo "$RES" | tr -d '[:space:]')" ]; then
		echo You should check your keywords.
		return 4
	fi
	total_res=$(echo "$RES" | wc -l)
	if ((total_res == 1)); then
		RES_LIST='1'
	elif [ -z "$RES_LIST" ] && ! ${DOWNLOAD_ALL:-false}; then
		vbar
		vbar "DubbedAnime.net Search Result" true
		vbar
		vbar "Select One or more to download"
		vbar
		echo "$RES" | cut -d: -f3- | awk -F: "{printf \"%-${#total_res}d ) %s\",NR,\$2;if (\$1) {print \" (eps:\"\$1\")\" }else{print \"\"}}"
		read -rp$'Download: ' RES_LIST
	elif ${DOWNLOAD_ALL:-false} && [ -z "$RES_LIST" ]; then
		RES_LIST='1-'
	fi
	if ! [[ $RES_LIST =~ ^[[:digit:],-]+$ ]]; then
		RES_LIST=$(echo "$RES_LIST" | sed 's/[^[:digit:],-]/,/g' | tr -s , | sed 's/-,/,/g')
	fi
	RES=$(echo "$RES" | cut -d: -f1,2,4-)
	RES_LIST=$(expand_limit "$(echo "$RES_LIST" | num_unicode2ascii)" "$total_res")
	for n in $RES_LIST; do
		target=$(echo "$RES" | head -n "$n" | tail -1)
		local base
		base="$(set_basedir "${target%%:*}")"
		if ! [ -d "$base" ] || ! [ -e "$base" ]; then
			rm -rf "$base"
			mkdir -p "$base"
		fi
		cd "$base" || true
		local dir
		dir="$(echo "$target" | cut -d: -f3- | replace_invalid dir)"
		${SKIP_DOWNLOAD:-false} || if [ ! -d "$dir" ]; then
			rm -f "$dir"
			mkdir "$dir"
		fi
		${SKIP_DOWNLOAD:-false} || {
			cd "$dir" || continue
		}
		${UPDATE_QUEUE:-false} && vbar
		echo -e "Title: '$dir'"
		da_get "$(echo "$target" | cut -d: -f1)" "$dir" "$(echo "$target" | cut -d: -f2)" "$*"
		if [ "$(echo "$RES_LIST" | wc -w)" -gt 1 ] && ! $NOBREAK; then
			read -rsp$'Press Return to download next.'
			printf '\n'
		fi
	done
}

da_rebuild_db()
{
	DO_UPDATE_ONLY=()
	for id in $(da_db list); do
		query=$(da_db get query)
		if [[ $query == 0 ]]; then
			query=$(da_db get title)
		fi
		url=$(da_api_search $query | grep ":$id:" | cut -d: -f1 | tr -d '[:space:]')
		prev_url=$(da_db get url)
		if [[ -n $url ]] && [[ $url != "$prev_url" ]]; then
			echo "Fixing $(da_db get title) [$id]"
			da_db set url "\"$url\""
			DO_UPDATE_ONLY+=("$id")
		elif [[ -z $url ]]; then
			echo "Failed to fix $(da_db get title) [$id]"
		fi
	done
}
da_list_queue()
{
	for id in $(da_db list); do
		if ! [ -d "$(da_db get path)" ]; then
			da_db del
			continue
		fi
		echo "[$id] $(da_db get title)"
	done
	return 0
}
da_update()
{
	local id dir updatable n new_eps
	NORESET=true
	updatable=()
	if (("${#DO_UPDATE_ONLY[@]}" == 0)); then
		for id in $(da_db list); do
			if ! [ -d "$(da_db get path)" ]; then
				da_db del
				continue
			fi
			echo -n "[$id] Checking update..."
			new_eps=$(($(da_get_len "$(da_db get url)") - $(da_db get saved)))
			if ((new_eps > 0)); then
				updatable+=("$id")
				echo -e "\r[$id] Queueing update($new_eps+)..."
			else
				echo
			fi
		done
	elif (("${#DO_UPDATE_ONLY[@]}")); then
		if (("${#DO_UPDATE_ONLY[@]}" > 1)) && [ "${DO_UPDATE_ONLY[0]}" = "!" ]; then
			DO_UPDATE_ONLY=("$(echo "${DO_UPDATE_ONLY[@]}" | cut -d' ' -f2- | tr -s ' ' '|')")
			for id in $(da_db list); do
				if echo "$n" | grep -qE "${DO_UPDATE_ONLY[0]}"; then
					continue
				fi
				if ! [ -d "$(da_db get path)" ]; then
					da_db del
					continue
				fi
				echo -n "[$id] Checking update..."
				new_eps=$(($(da_get_len "$(da_db get url)") - $(da_db get saved)))
				if ((new_eps > 0)); then
					updatable+=("$id")
					echo -e "\r[$id] Queueing update($new_eps+)..."
				else
					echo
				fi
			done
		else
			for id in "${DO_UPDATE_ONLY[@]}"; do
				if da_db has; then
					updatable+=("$id")
				fi
			done
		fi
	fi
	for id in "${updatable[@]}"; do
		dir="$(da_db get path)"
		if ! [ -d "$dir" ]; then
			mkdir -p "$dir" || continue
		fi
		cd "$dir" || continue
		FILE_LIST_RANGE=$(da_db get saved | awk '{print ($0 == "null" || $0 == "0")?"1-":$0"-";}')
		da_get "$(da_db get url)" "$(basename "$dir")" "$id"
		if [ "$(da_db get saved)" -ge "$(da_db get total)" ]; then
			da_db del
		fi
		if ! $NOBREAK; then
			read -rsp$'Press Return to download next.'
			printf '\n'
		fi
	done
}
set_basedir()
{
	case $1 in
		*-avatar-the-legend-of-korra-* | *-avatar-the-last-airbender-*)
			echo "$CARTOON_PATH/Avatar"
			;;
		anime/*) echo "$ANIME_PATH" ;;
		*power-rangers*) echo "$POWER_RANGERS_PATH" ;;
		*tv-series* | *kamen-rider*) echo "$TV_SERIES_PATH" ;;
		*movie*) echo "$MOVIE_PATH" ;;
		cartoon/*) echo "$CARTOON_PATH" ;;
	esac
}
#end:code
if ! ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
	[[ -n $BASH_VERSION ]] && (return 0 2> /dev/null)); then
	da_search "$@"
fi
