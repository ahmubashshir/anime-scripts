#!/bin/bash
if [ -n "$AP" ];then
	ANIME_PATH="$AP"
fi
readonly ANIME_ROOT='/mnt/Multimedia/Anime'
if [[ $ANIME_PATH =~ @/* ]];then
	ANIME_PATH="$ANIME_ROOT/${ANIME_PATH#*/}"
fi
if [[ -z $ANIME_PATH ]];then
	readonly ANIME_PATH="$ANIME_ROOT"
fi
if [[ ! -d $ANIME_PATH ]];then
	mkdir -p "$ANIME_PATH" &>/dev/null|| exit 1
fi
check_deps()
{
	a=0
	for n in "$@";do
		if ! type "$n" &> /dev/null;then
			echo "Please install $n or make sure it is in your path."
			let a=a+1
		fi
	done
	return $a
}
check_deps spinner libbash tput wget cd echo mkdir printf read rm curl lsof sleep||exit $?
. spinner
. libbash
#reset()
#{
#	return 0
#}
#stop_spinner()
#{
#	return 0
#}
#start_spinner()
#{
#	return 0
#}
#vbar()
#{
#	return 0
#}
sp=$sp31
SPINNER_DELAY=0.04
clear_line()
{
	tput sc
	for ((i=0;i<=$1;i++));do
		printf "\r%-${COLUMNS}s"
	done
	tput rc
}
danime_help()
{
	echo "$(basename "$0") Help:"
	echo Usage:
	printf "  %s [command] [option] <anime name>\n" "$(basename "$0")"
	echo "Commands:"
	printf "  s<digit[,[...]]>\tchoose <digit> no. search result autometically.\n"
	printf "  ep\t\t\tShow episode list selection to download.\n"
	printf "  ep<digit[-[digit]]>\tdownload episode [digit[-[digit]]]\n"
	printf "  dub,sub\t\tDownload dubbed or subbed episodes\n"
	echo "Options:"
	printf "  -c,--continue\t\tcontinue after downloading a selection.\n"
	printf "  -h,--help\t\tshow this menu\n"
	echo "Example:"
	printf "  #1: %s <anime name> \n"  "$(basename "$0")"
	printf "  #2: %s <anime name> s1,2\n" "$(basename "$0")"
	printf "  #3: %s <anime name> ep5-9\n" "$(basename "$0")"
	printf "  #4: %s <anime name> ep\n" "$(basename "$0")"
	printf "  #5: %s s1 <anime name>\n" "$(basename "$0")"
	printf "  #6: %s ep <anime name>\n" "$(basename "$0")"
	printf "  #7: %s ep5 <anime name>\n" "$(basename "$0")"
	printf "  #8: %s dub <anime name>\n" "$(basename "$0")"
	printf "Note: You must provide <anime name>\n"
	printf "Environment Variable:\n  TYPE_ANIME:\t supported value:{subbed,dubbed}\n"
}
fep_get()
{
	local host
	local name_ep
	local furl
	local ep_name
	start_spinner "Getting url from episode id:$(echo "$2"|cut -d, -f2|tr -d '[:space:]')"
	#set -x
	host=$(echo "$2"|cut -d, -f1)
	name_ep=$(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g')
	#[[ $host = "mp4upload" ]]&&set -x||set +x

	if [ "$host" = "trollvid" ];then
		#mp4share/trollvid vidoe url extractor;
		furl=$(urldecode "$(wget -q -O- "https://mp4.sh/embed/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|grep "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)\.mp4"|tr -d \',\),\;|cut -d'(' -f2)")
		if [[  $furl =~ https://mp4.sh/[[:alpha:]]/* ]];then
			rm -f .cookies.*
			tmp=$(mktemp '.cookies.XXXXXXXXXXXX')
			sleep 2
			furl="$(curl -sL -o /dev/null -r 0-0 -w '%{url_effective}\n' -sc  "$tmp" "$(curl -sc  "$tmp" "https://mp4.sh/video/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)" |grep -i DOWNLOAD|tr \  \\n|grep href|cut -d\' -f2)")"
			rm -f "$tmp"
			unset tmp
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl="$(echo "$furl"|tr \  \\n|grep href|tr -d \"|cut -d= -f2)"
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl=$(curl "https://mp4.sh/video/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)" 2>/dev/null|grep -i download|tr \  \\n|grep href|tr -d \'|cut -d= -f2-|cut -d\> -f1)
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl=""
		fi
	elif [ "$host" = "mp4upload" ];then
		#mp4upload video url extractor
		local vid_id=$(curl "https://www.mp4upload.com/embed-$(echo "$ids"|cut -d\| -f1|cut -d, -f2).html" 2>/dev/null|sed 's|video\||\nid:|g;s|setup|\n|g;s|complete|\n|g;s|www|\nwww|g'|grep '^www[[:digit:]].*\|^id'|tr -d \\n|sed 's|id:||g;s|\|$||g')
		[[ $vid_id = '' ]]&&vid_id=$(curl "https://www.mp4upload.com/embed-$(echo "$ids"|cut -d\| -f1|cut -d, -f2).html" 2>/dev/null|sed 's|append\||sd:|g;s|\|mp4\||\|mp4:|g;s|\|Video|:port|g'| grep mp4upload|tr \| \\n|grep '^sd:[w]*[[:digit:]]$\|^mp4:[[:alnum:]]*$\|^[[:digit:]]*:port$'|tr \\n :|cut -d: -f2,4,5|sed 's|:|\||g')
		[[ $vid_id != '' ]]&&furl="https://${vid_id%%|*}.mp4upload.com:${vid_id##*|}/d/$(echo "$vid_id"|cut -d\| -f2)/video.mp4"
		unset vid_id
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4upload.com:[[:digit:]]+/d/*/video.mp4 ]];then
			furl=""
		fi
	fi

	[[ $furl = "" ]]||(exit -2)
	stop_spinner $?
	if [ "$(echo "$name_ep"|grep "$(echo "$2"|cut -d, -f3)")" = "" ];then
		if [ "$(echo "$2"|cut -d, -f3)" = "subbed" ];then
			ep_name=$(echo "$name_ep"|sed 's|dub|sub|g')
		elif [ "$(echo "$2"|cut -d, -f3)" = "subbed" ];then
			ep_name=$(echo "$name_ep"|sed 's|sub|dub|g')
		fi
	else
		ep_name=$name_ep
	fi
	[[ $furl != "" ]]&&fget "$furl" "$ep_name"
	return
}
append_updatable()
{
	readonly db_file=$HOME/.danime_updatables
	echo "$1|$2" >> "$db_file"
}
ep__get()
{
	local host
	local s1
	local s2
	local ids
	local furl
	local TMOUT
	local n
	vbar
	ids=$(echo "$1"|cut -d: -f2)
	vbar "$(echo "$1"|cut -d: -f4- --output-delimiter=' ')" true
	if [[ $2 != '' ]];then
		vbar "ID:$(echo "$1"|cut -d: -f3) -- Progress:$2"
	else
		vbar "ID:$(echo "$1"|cut -d: -f3)"
	fi
	vbar
	tput sc
	if [ "$ids" = "unavailable" ];then
		echo -e "$(tput setaf 1;tput dim)This episode is not available,skipping...$(tput sgr0)"
		return 0
	fi
	start_spinner "Getting url from episode id:$(echo "$ids"|cut -d\| -f1|cut -d, -f2|tr -d '[:space:]')"
	host=$(echo "$ids"|cut -d\| -f1|cut -d, -f1)
	#[[ $host = "mp4upload" ]]&&set -x||set +x
	#set -x

	if [ "$host" = "trollvid" ];then
		#mp4share/trollvid vidoe url extractor;
		furl=$(urldecode "$(wget -q -O- "https://mp4.sh/embed/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|grep "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)\.mp4"|tr -d \',\),\;|cut -d'(' -f2)")
		if [[  $furl =~ https://mp4.sh/[[:alpha:]]/* ]];then
			rm -f .cookies.*
			tmp=$(mktemp '.cookies.XXXXXXXXXXXX')
			sleep 2
			furl="$(curl -sL -o /dev/null -r 0-0 -w '%{url_effective}\n' -sc  "$tmp" "$(curl -sc  "$tmp" "https://mp4.sh/video/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)" |grep -i DOWNLOAD|tr \  \\n|grep href|cut -d\' -f2)")"
			rm -f "$tmp"
			unset tmp
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl="$(echo "$furl"|tr \  \\n|grep href|tr -d \"|cut -d= -f2)"
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl=$(curl "https://mp4.sh/video/$(echo "$ids"|cut -d\| -f1|cut -d, -f2)" 2>/dev/null|grep -i download|tr \  \\n|grep href|tr -d \'|cut -d= -f2-|cut -d\> -f1)
		fi
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4.sh/[[:alpha:]]/* ]];then
			furl=""
		fi
	elif [ "$host" = "mp4upload" ];then
		#mp4upload video url extractor
		local vid_id=$(curl "https://www.mp4upload.com/embed-$(echo "$ids"|cut -d\| -f1|cut -d, -f2).html" 2>/dev/null|sed 's|video\||\nid:|g;s|setup|\n|g;s|complete|\n|g;s|www|\nwww|g'|grep '^www[[:digit:]].*\|^id'|tr -d \\n|sed 's|id:||g;s|\|$||g')
		[[ $vid_id = '' ]]&&vid_id=$(curl "https://www.mp4upload.com/embed-$(echo "$ids"|cut -d\| -f1|cut -d, -f2).html" 2>/dev/null|sed 's|append\||sd:|g;s|\|mp4\||\|mp4:|g;s|\|Video|:port|g'| grep mp4upload|tr \| \\n|grep '^sd:[w]*[[:digit:]]$\|^mp4:[[:alnum:]]*$\|^[[:digit:]]*:port$'|tr \\n :|cut -d: -f2,4,5|sed 's|:|\||g')
		[[ $vid_id != '' ]]&&furl="https://${vid_id%%|*}.mp4upload.com:${vid_id##*|}/d/$(echo $vid_id|cut -d\| -f2)/video.mp4"
		unset vid_id
		if [[ ! $furl =~ https://[[:alnum:]]+.mp4upload.com:[[:digit:]]+/d/[[:alnum:]]+/video.mp4 ]];then
			furl=""
		fi
	fi
	#set +x
	[[ $furl != "" ]]||(exit -2)
	stop_spinner $?
	#set -x
	if [[ $furl = "" ]];then
		echo -n "ID $(echo "$ids"|cut -d\| -f1|cut -d, -f2) not available"
		echo "$host:$(echo "$ids"|cut -d\| -f1|cut -d, -f2)" >> unavailable
		sort -u -o unavailable unavailable
		if (($(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|cat -s|wc -l)>1));then
			echo -e ",\nSelect one below:"
			TMOUT=10
			select n in $(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)") "skip";do
				if [[ $n == "skip" ]];then
					tput rc
					(exit 0)
					break
				fi
				tput rc
				clear_line $((3+$(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|wc -l)))
				tput rc
				fep_get "$1" "$n" && break
			done
			unset TMOUT
		elif (($(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|cat -s|wc -l)==1));then
			tput rc
			fep_get "$1" "$(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)")"
		else
			echo -e ",\nSkipping because no other source available"

		fi
		return
	else

		s1=$(wget --spider --no-check-certificate -qS "$furl"  2>&1|sed 's|^[[:space:]]*||g;s|: |:|g'|grep Content-Length:|cut -d: -f2)
		s2=$(stat -c%s "$(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g')" 2>/dev/null||echo 0)

		if ((s1>=s2));then
			fget "$furl" "$(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g')"
		fi
		start_spinner "Checking $(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g') integrity"
		#set -x
		if [ -n "$(ffmpeg -v error -map 0:0 -f null - -i "$(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g')" 2>&1|grep -v '^\[\|^[[:blank:]]')" ]||((s1<s2));then
			stop_spinner 1
			echo "ID $(echo "$ids"|cut -d\| -f1|cut -d, -f1,2 --output-delimiter=:) is corrupted"
			echo -n "downloaded file is $(byte_hr "$s2") and episode size is $(byte_hr "$s1")"
			echo -n "ID $(echo "$ids"|cut -d\| -f1|cut -d, -f1,2 --output-delimiter=:) is corrupted">>danime.log
			logtext=$(cat danime.log)
			echo "$logtext"|sort|uniq>danime.log
			unset logtext
			if (($(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|cat -s|wc -l)>1));then

				echo -e ",\nSelect one below:"
				TMOUT=10

				select n in $(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)") "skip";do

					if [[ $n == "skip" ]];then
						tput rc
						(exit 0)
						break
					fi

					tput rc
					clear_line $((3+$(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|wc -l)))
					rm "$(echo "$1"|cut -d: -f1|sed 's|-[Aa][Nn][Dd]-|-and-|g;s|-[Bb][Uu][Tt]-|-but-|g;s|-[Oo][Rr]-|-or-|g;s|-[Aa][Ss]-|-as-|g;s|-[Oo][Ff]-|-of-|g;s|-[Tt][Oo]-|-to-|g;s|-[Aa][Tt]-|-at-|g;s|-[Oo][Nn]-|-on-|g;s|-[Bb][Yy]-|-by-|g;s|-[Nn][Oo][Tt]-|-not-|g')"
					fep_get "$1" "$n" && break

				done
				unset TMOUT

			elif (($(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)"|cat -s|wc -l)==1));then

				tput rc
				fep_get "$1" "$(echo "$ids"|tr \| \\n|grep -v "$(echo "$ids"|cut -d\| -f1|cut -d, -f2)")"

			else

				echo -e ",\nSkipping because no other source available"

			fi
		fi
		#set +x
		stop_spinner 0
		return
	fi
}
fetch_letest()
{
	return 0
}
ep_id()
{
	local pagestr
	local page
	local title
	for n in "$@";do
		pagestr=$(curl "$n" 2>/dev/null)
		page=$(echo "$pagestr"|grep var\ episode|cut -d= -f2|sed 's|\;$||g'|jsonparser -q|grep '\[\"videos\"\]'|tr \\t \ |cut -d\  -f2-|tr : \||sed 's|},{|\n|g'|tr -d \[\{\}\]\;|tr -d "[:blank:]"|cut -d, -f-3|sed 's|"host"||g;s|"id"||g;s|"type"||g;s|[\|"]||g'|tr \\n \||sed 's|\|$||'|tr -d \\n)
		page="${page:=unavailable}"
		title=$(echo "$pagestr"|grep 'h4 d-inline-block pb-0 pt-2 mb-0'|sed 's|</h1>$||g'|cut -d\> -f2|tr -d \\n)
		if [ -z "$title" ];then
			title="$(basename "$n"|cut -d- -f2- --output-delimiter=' '|sed 's/.*/\L&/; s/[a-z]*/\u&/g')"
		fi
		printf "%s" "$title"|sed 's| |-|g'|sed 's|[:<>$@^/\\#=+]|-|g;s|?|﹖|g'|sed "s|\"|＂|g"|tr -s '[:punct:]'|tr -s '[:blank:]'|sed 's|-English-S|-s|gI'|sed 's|-English-D|-d|gI'|tr -d '[:space:]'
		printf ".mp4:"
		printf "%s" "$page"
		printf ":"
		printf "%s:" "$(basename "$n"|cut -d- -f1)"
		printf "%s" "$title"|sed 's|: |꞉|g'|tr \  ':'|tr ':' '\n'|head -n -2|tr '\n' ':'|sed 's|:$||g'|tr -d '\n'
		printf "\n"
	done|sed "s|Episode-|ep-|gI;s|Special|special|gI;s|Ova|ova|gI;s|Movie|movie|gI;s|Ona|ona|gI"|tr -s :|sed "s|-$||g;s|\"|＂|g"
}
ep_search()
{
	local a
	local capcha
	local ch
	local cha
	local  chs
	local chs
	local ep
	local opt
	local res
	local resc
	local str
	local tr
	local continue
	continue=$5
	tr=$(echo "$1"|cut -d: -f2)
	cha=$(echo "$2"|cut -d: -f2)
	ep="$3"
	str=$(echo "$4"|cut -d: -f2|sed 's| |+|g')
	start_spinner "Searching for $(echo "$str"|sed 's|+| |g')"
	res=$(curl "https://ww5.dubbedanime.net/search?term=$str" 2>/dev/null)
	capcha=$(echo "$res"|grep why_captcha_headline)
	[[ $capcha != '' ]]&& stop_spinner 1&& echo "Access denied,try later."&&return 1
	opt=$(echo "$res"|grep -v \>Random\!\<|grep https://ww5.dubbedanime.net/anime/|sed 's|><|\n|g'|grep href|sed 's|: |꞉|g;s|?|﹖|g'|sed 's| |-|g'|sed 's|:|꞉|g'|sed 's|</a||g'|sed 's|>|:|g'|cut -d= -f2|gawk -F / '{print $NF}'|tr -s '[:punct:]'|sed "s|-$||g;s|\"|＂|g")
	if [ "$opt" = "" ];then
	(exit 4)
	fi
	stop_spinner $?
	resc=$(echo "$opt"|wc -l)
	ch=$(parse_ep "$cha" "$resc")
	for n in $ch;do
		if ((n>resc));then
			echo Invalid choice
			return 1
		fi
	done
	if [ "$opt" != "" ];then
		if ((resc>1))&& [[ $ch = '' ]];then
			vbar;vbar "DubbedAnime.net Search Result" true;vbar
			vbar "Select One to download";vbar
			R=$IFS
			IFS=$'\n'
			select d in $(echo "$opt"|cut -d: -f2|sed 's|-| |g');do
				chs="$d"
				break
			done
			IFS=$R
		else
			if ((resc>1))&& [[ $ch != '' ]];then
				for n in $ch;do
					a=$(echo "$opt"|cut -d: -f2|head -"$n"|tail -1)
					chs=$(printf "%s\n%s" "$chs" "$a")
				done
			elif ((resc==1));then
				chs=$(echo "$opt"|cut -d: -f2)
			else
				echo "Invalid Choice:$ch"
				return "$ch"
			fi
			chs=$(printf "%s" "$chs"|sed 's|-| |g')
		fi
		R=$IFS
		IFS=$'\n'
		for o in $chs;do
			s=$(echo "$o"|sed 's| |-|g')
			cd "$ANIME_PATH"|| true
			if [ ! -d "$(echo "$o"|sed 's|\.$|．|g')" ];then
				mkdir "$(echo "$o"|sed 's|\.$|．|g')"
			fi
			cd "$(echo "$o"|sed 's|\.$|．|g')" || continue
			echo -e "Title:$o\nDir:$(echo "$o"|sed 's|\.$|．|g')"
			ep_get "$(echo "$opt"|grep ":$s$"|cut -d: -f1|tr -d \\\')" "$o" "$tr" "$ep"
			(($? != 0 ))&&return 255
			if [ "$(echo "$chs"|wc -l)" -gt 1 ]&&[[ $continue == '' ]];then
				read -rsp$'Press Return to download next.'
				printf '\n'
			fi
		done
		IFS=$R
	else
		echo "Sorry,We are unable to find $(echo "$str"|sed 's/+/ /g')"
	fi
}
anime_cover()
{
	local ep_count
	local anime_cover_img
	ep_count=$1
	anime_cover_img=$2
	if ((ep_count>1))&&[ ! -e folder.jpg ];then
		wget --no-check-certificate -nv "$anime_cover_img" -cO "cover.jpg"
			if ! grep -q cover.jpg .hidden &>/dev/null;then
				echo cover.jpg >> .hidden
			fi
	fi
}

search()
{
	local tr=$(echo "$1"|cut -d: -f2)
	local cha=$(echo "$2"|cut -d: -f2)
	local str=$(echo "$3"|cut -d: -f2|sed 's| |+|g')
	start_spinner "Searching for $(echo "$str"|sed 's|+| |g')"
	local res=$(curl "https://ww5.dubbedanime.net/search?term=$str" 2>/dev/null)
	local capcha=$(echo "$res"|grep why_captcha_headline)
	local continue=$4
	[[ $capcha != '' ]]&& stop_spinner 1&& echo "Access denied,try later."&&return 1
	local opt=$(echo "$res"|grep -v \>Random\!\<|grep https://ww5.dubbedanime.net/anime/|sed 's|><|\n|g'|grep href|sed 's|: |꞉|g;s|?|﹖|g'|sed 's| |-|g'|sed 's|:|꞉|g'|sed 's|</a||g'|sed 's|>|:|g'|cut -d= -f2|gawk -F / '{print $NF}'|tr -s "[:punct:]"|sed "s|-$||g;s|\"|＂|g")
	if [ "$opt" = "" ];then
	(exit 4)
	fi
	stop_spinner $?
	local resc=$(echo "$opt"|wc -l)
	local ch=$(parse_ep "$cha" "$resc")
	for n in $ch;do
		if ((n>resc));then
			echo Invalid choice
			return 1
		fi
	done
	if [ "$opt" != "" ];then
		if ((resc>1))&& [[ $ch = '' ]];then
			vbar;vbar "DubbedAnime.net Search Result" true;vbar
			vbar "Select One to download";vbar
			R=$IFS
			IFS=$'\n'
			select d in $(echo "$opt"|cut -d: -f2|sed 's|-$||g'|sed 's|-| |g');do
				local chs="$d"
				break
			done
			IFS=$R
		else
			if ((resc>1))&& [[ $ch != '' ]];then
				for n in $ch;do
					local a=$(echo "$opt"|cut -d: -f2|sed 's|-| |g'|head -"$n"|tail -1)
					local chs=$(printf "%s\n%s" "$chs" "$a"|sed 's| $||g')
				done
			elif ((resc==1));then
				local chs=$(echo "$opt"|cut -d: -f2|sed 's|-| |g'|sed 's| $||g')
			else
				echo "Invalid Choice:$ch"
				return "$ch"
			fi
		fi
		R=$IFS
		IFS=$'\n'
		for o in $chs;do
				local s=$(echo "$o"|sed 's| |-|g')
				cd "$ANIME_PATH"||true
				if [ ! -d "$(echo "$o"|sed 's|\.$|．|g')" ];then
					mkdir "$(echo "$o"|sed 's|\.$|．|g')"
				fi
				cd "$(echo "$o"|sed 's|\.$|．|g')"|| continue
				echo -e "Title:$o\nDir:$(echo "$o"|sed 's|\.$|．|g')"
				get "$(echo "$opt"|grep ":$s$"|cut -d: -f1|tr -d \\\')" "$o" "$tr"
				if [ "$(echo "$chs"|wc -l)" -gt 1 ]&&[[ $continue == '' ]];then
					read -rsp$'Press Return to download next.'
					printf '\n'
				fi
		done
		IFS=$R
	else
		echo "Sorry,We are unable to find $(echo "$str"|sed 's|+| |g')"
		return 0
	fi
}
parse_ep()
{
	if [[ $1 =~ [[:digit:]]-$ ]];then
		local n=${1%%-*}
		for (( i=n;i<=$2;i++));do
			printf "%d " "$i"
		done
	else
		IFS=$'\ '$'\t'$'\n'$'\0'
		for n in $(echo "$1"|cut -d, -f1- --output-delimiter=' ');do
			if [[ $n =~ [[:digit:]]-[[:digit:]] ]];then
				i=${n%%-*}
				j=${n##*-}
				for ((k=i;k<=j;k++));do
					printf "%d " "$k"
				done
			else
				printf "%d " "$n"
			fi
		done
	fi |sed 's| $||g'
}
get()
{
	#set -x
	local baseurl
	local ep_c
	local ex
	local id
	local name
	local page
	local title
	local progress
	local tr
	local url
	id=$1
	name=$2
	tr=$3
	if [ "$id" = "" ];then
	exit -3
	fi
	#set +x
	start_spinner "Fetching anime info"
	page=$(curl "https://ww5.dubbedanime.net/anime/$id" 2>/dev/null)
	title=$(echo "$page"|grep "h4 d-inline-block pb-0 pt-2 mb-0"|cut -d\> -f2|cut -d\< -f1)
	if (echo "$title"|grep ':' &>/dev/null);then
	title=$(echo "$title"|cut -d: -f2)
	fi
	title=$(echo "$title"|sed 's| |-|g'|tr '[:upper:]' '[:lower:]'|sed 's|^-||g;s|-$||g'|tr -d "$(echo "$title"|tr -d '[:alnum:]-')"|tr -s '-')
	#set +x
	baseurl=$(echo "$page"| grep "$title"|sed 's| |\n|g'|grep href|sed "s|'||g"|cut -d= -f2|grep -v '>')
	[[ $baseurl = '' ]]&&baseurl=$(echo "$page"|  grep "$(echo "$id"|cut -d- -f2-)"|sed 's| |\n|g'|grep href|sed "s|'||g"|cut -d= -f2|grep -v '>')
	stop_spinner $?
	[[ $NORESET != true ]]&&reset
	if [ "$(echo "$baseurl"|grep \\-dubbed|tr -d '[:space:]')" != "" ]&&[ "$(echo "$baseurl"|grep \\-subbed$|tr -d "[:space:]")" != "" ];then
		url="$(echo "$baseurl"|grep "$tr$")"
	else
		tr=$(echo "$baseurl"|tail -1|sed 's|-|\n|g'|tail -1)
		url="$baseurl"
	fi
	ep_c=$(echo "$url"|cat -s|wc -l)
	anime_cover "$ep_c" "https://cdn.animeapi.com/images/anime/${id%%-*}.jpg"
	[[ $NORESET != true ]]&&reset
	vbar
	vbar "$name" true
	vbar "Files:$ep_c Type:$tr"
	vbar "ID:${id%%-*}"
	vbar
	start_spinner "Getting episode ID"
	id=$(ep_id ${url}|tac)
	stop_spinner $?
	ep_c=$(echo "$id"|cat -s|wc -l)
	#set -x
	for n in $id
	do
		if ((ep_c==1));then local progress=1
		else let progress=progress+1;fi
		#set +x
		ep__get "$n" "$progress/$ep_c"
		#set -x
		ex=$?
		if [ $ex -ne 0 ]&&[ $ex -ne 10 ]&&[ $ex -ne 8 ];then
			echo "Failed to download $(echo "$n"|cut -d: -f4- --output-delimiter=' ')"
			[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url"|grep -i "/$(echo "$n"|cut -d: -f3)")\">$(echo "$n"|cut -d: -f4- --output-delimiter=' ')</a>"
			return 154
			break
		fi
	done
	[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "$name is downloaded"
	#set +x
}
danime_list()
{
	cd $ANIME_PATH||return
	for n in *;do
		if [ ! -d "$n" ];then
			n=${n%.*}
			echo "$n"|sed 's|-|\n|g'|grep -v "subbed\|dubbed"|tr \\n \ ;
			printf '\n'
		else
			echo "$n"
		fi
	done
}
ep_get()
{
	local baseurl
	local ep
	local eparg
	local epc
	local ep_show
	local id
	local n
	local name
	local page
	local R
	local title
	local tr
	local url
	id=$1
	name=$2
	tr=$3
	eparg=$(echo "$4"|cut -d: -f2)
	if [ "$id" = "" ];then
	exit -3
	fi
	start_spinner "Fetching anime info"
	page=$(curl "https://ww5.dubbedanime.net/anime/$id" 2>/dev/null)
	title=$(echo "$page"|grep "h4 d-inline-block pb-0 pt-2 mb-0"|cut -d\> -f2|cut -d\< -f1)
	if (echo "$title"|grep ':' &>/dev/null);then
	title=$(echo "$title"|cut -d: -f2)
	fi
	title=$(echo "$title"|sed 's| |-|g'|tr '[:upper:]' '[:lower:]'|sed 's|^-||g;s|-$||g'|tr -d "$(echo "$title"|tr -d '[:alnum:]-')"|tr -s '-')
	#set +x
	baseurl=$(echo "$page"| grep "$title"|sed 's| |\n|g'|grep href|sed "s|'||g"|cut -d= -f2|grep -v '>')
	[[ $baseurl = '' ]]&&baseurl=$(echo "$page"|  grep "$(echo "$id"|cut -d- -f2-)"|sed 's| |\n|g'|grep href|sed "s|'||g"|cut -d= -f2|grep -v '>')
	stop_spinner $?
	[[ $NORESET != true ]]&&reset
	if [ "$(echo "$baseurl"|grep dubbed$|tr -d '[:space:]')" != "" ]&&[ "$(echo "$baseurl"|grep subbed$|tr -d '[:space:]')" != "" ];then
		url="$(echo "$baseurl"|grep "$tr$")"
	else
		tr=$(echo "$baseurl"|tail -1|sed 's|-|\n|g'|tail -1)
		url="$baseurl"
	fi
	[[ $NORESET != true ]]&&reset
	vbar
	if [[ $eparg =~ [[:digit:]]+-[[:digit:]]+ ]];then
		ep_show="ep range($eparg)"
	elif [[ $eparg =~ [[:digit:]]+- ]];then
		ep_show="ep range($eparg$(echo "$url"|wc -l))"
	elif [[ $eparg =~ [[:digit:]]+,* ]];then
		ep_show="ep $eparg"
	else
		ep_show="episode $eparg"
	fi
	epc=$(echo "$url"|cat -s|wc -l)
	vbar "$name" true
	vbar "Files:$epc Type:$tr"
	if [[ $ep != '' ]];then
		vbar "ID:${1%%-*} Downloading:$ep_show"
	else
		vbar "ID:$1"
	fi
	anime_cover "$epc" "https://cdn.animeapi.com/images/anime/${id%%-*}.jpg"
	vbar
	start_spinner "Getting Episode List"
	id=$(ep_id ${url}|tac)
	stop_spinner $?
	##set -x
	epc=$(echo "$id" |cat -s|wc -l)
	ep=$(parse_ep "$eparg" "$epc")
	if [[ $ep = '' ]];then
		[[ $NORESET != true ]]&&reset
		vbar
		vbar "Episode List:$name" true
		vbar
		R=$IFS
		IFS=$'\n'
		vbar "Press CTRL+D to quit"
		select c in $(echo "$id"|cut -d: -f1|sed 's|-| |g'|sed 's|.mp4||g') Quit
		do
			if [ "$c" != "Quit" ];then
			IFS=$R
				[[ $NORESET != true ]]&&reset
				n=$(echo "$id"|grep "$(echo "$c"|sed 's| |-|g')")
				ep__get "$n"
				if [ "$?" != "0" ];then
					echo "Failed to download ${n%:*}"
					[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url"|grep -i "$(echo "$n"|cut -d: -f3)")\">$(echo "$n"|cut -d: -f4- --output-delimiter=' ')</a>"
					break
				fi
				[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "$(echo "$n"|cut -d: -f4- --output-delimiter=' ')  is downloaded"
			else
				break
			fi
		done
	else
		IFS=$'\ '$'\t'$'\n'$'\0'
		for c in $ep;do
			if ((c<=epc));then
				n=$(echo "$id"|grep ":$c$")
				ep__get "$n"
				if [ "$?" != "0" ]&& [ "$?" != "10" ];then
					echo "Failed to download $(echo "$n"|cut -d: -f4- --output-delimiter=' ')"
					[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Download Failed" "Failed to download <a href=\"$(echo "$url"|grep -i "$(echo "$n"|cut -d: -f3)")\">$(echo "$n"|cut -d: -f4- --output-delimiter=' ')</a>"
					break
				fi
			else
				echo "Invalid Episode Number:$c"
				[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.error "Invalid Choice" "Invalid Episode Number:$c"
			fi
			#set +x
		done
		[[ $DISPLAY != '' ]]&&notify-send --urgency=normal -a DubbedAnime --expire-time=1000000 --icon=emblem-downloads --category=transfer.complete "Download Completed" "$name $ep_show is downloaded"
	fi
}




if [[ $# != 0 ]]&&[[ $1 != latest ]];then
	ch=$(echo "$@"|sed 's| |\n|g'|grep -E '^s[[:digit:]].*$'|grep -E '[[:digit:]]$|[[:digit:]]-'|sed 's|^s||g')
	sep=$(echo "$@"|sed 's| |\n|g'|grep -E '^ep$')
	ep=$(echo "$@"|sed 's| |\n|g'|grep -E '^ep[[:digit:]].*$'|grep -E '[[:digit:]]$|[[:digit:]]-'|sed 's|^ep||g')
	if [[ -n $TYPE_ANIME ]]&&([[ $TYPE_ANIME = subbed ]]||[[ $TYPE_ANIME = dubbed ]]);then
		tr=$TYPE_ANIME
	else
		tr="$(echo "$@"|sed 's| |\n|g'|grep -E '^sub$'||echo dub)bed"
	fi
	ss=$(echo "$@"|sed 's| |\n|g'|grep -v "^ep$"|grep -E -v "^ep$ep$"|grep -E -v "^s$ch$"|grep -E -v '^sub$'|grep -E -v '^dub$'|grep -v '^-[[:alnum:]]*$'|tr \\n \ |sed 's|^ ||g'|sed 's| $||g')
	opts=$(echo "$@"|sed 's| |\n|g'|grep '^-[[:alnum:]]*$\|^--[[:alnum:]]*$'|tr \\n \ |sed 's|^ ||g'|sed 's| $||g'|sed 's|-||g')
	continue=true
	for n in $opts;do
		case $n in
			c|continue) continue=true;;
			nc|no-continue) unset continue;;
			h|help) danime_help;exit 0;;
			l|list) danime_list;exit 0;;
			no-reset|nr) NORESET=true;;
			*) echo Invalid option;;
		esac
	done

	if [[ $ss != '' ]];then
		if [ -n "$NC" ]||check_up_server dubbedanime.net "$RSOLV";then
			if [[ $ep != '' ]]||[[ $sep != '' ]];then
					echo "tr:$tr" "ch:$ch" "ep:$ep" "s:$ss" "$continue"
					ep_search "tr:$tr" "ch:$ch" "ep:$ep" "s:$ss" "$continue"
			else
					search "tr:$tr" "ch:$ch" "s:$ss" "$continue"
					exit $?
			fi
		else
			echo Request timed out
			exit -2
		fi
	else
		danime_help
		exit 1
	fi
elif [[ $1 == latest ]];then
	fetch_letest
else
	danime_help
	exit 1
fi
