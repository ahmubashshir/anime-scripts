#!/bin/bash
# shellcheck disable=SC2034
((def_include)) && return 0 || def_include=1
DEBUG=${DEBUG:-false}
#start:code
export USER_AGENT="${USER_AGENT:-Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36}"
CURL_OPTIONS=(
	--compressed
	-H 'authority: 1anime.to'
	-H 'pragma: no-cache'
	-H 'cache-control: no-cache'
	-H 'user-agent: '"$USER_AGENT"
	-H 'origin: https://1anime.to'
	-H 'sec-fetch-site: same-origin'
	-H 'sec-fetch-mode: cors'
	-H 'sec-fetch-dest: empty'
)
shopt -s nullglob
if [ -d ~/.local/share/danime ]; then
	cookies=()
	for each in ~/.local/share/danime/cookies-*.txt; do
		cookies+=("$each")
	done
	if ((${#cookies[@]})); then
		cat "${cookies[@]}" > ~/.local/share/danime/cookies.txt
	fi
	unset cookies
	if [ -f ~/.local/share/danime/cookies.txt ]; then
		CURL_OPTIONS+=(--cookie ~/.local/share/danime/cookies.txt)
	fi
fi

langs=(
	'০১২৩৪৫৬৭৮৯'
	'〇一二三四五六七八九'
	'０１２３４５６７８９'
)

ellipsis()
{
	python3 -c "try:
	from sys import argv
	l=int(int(argv[1])/2)
	if len(' '.join(argv[2:]))>l*2:
		print(' '.join(argv[2:])[0:l],'...',' '.join(argv[2:])[-l:],sep='')
	else:
		print(' '.join(argv[2:]),sep='')
except KeyboardInterrupt:
	pass" "$@"

}

clear_line()
{
	local line
	tput sc
	for ((line = 0; line <= $1; line++)); do
		printf "\r%-${COLUMNS}s"
	done
	tput rc
}

expand_limit()
{
	local start end rest range="$1" max="$2" count=0
	# debug flag
	${DEBUG:-false} && set -x
	# code
	if [[ $range =~ ^[[:digit:]]+-$ ]]; then
		rest=${range%%-*}
		for ((start = rest; start <= max; start++)); do
			((count++)) && printf ' '
			((start <= max)) && printf "%d" "$start"
		done
	else
		for rest in $(echo "$range" | cut -d, -f1- --output-delimiter=' '); do
			((count++)) && printf ' '
			if [[ $rest =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then
				start=${rest%%-*}
				end=${rest##*-}
				if ((end > max)); then
					end=$max
				fi
				expand_limit "$start-" "$end"
			elif [[ $rest =~ ^[[:digit:]]+$ ]]; then
				((rest <= max)) && printf "%d" "$rest"
			else
				expand_limit "$rest" "$max"
			fi
		done
	fi
	# unset debug
	${DEBUG:-false} && set +x
	return 0
}
contract_limit()
{
	# arrays
	local -a args
	# variables
	local max="$1" next_curr=0 curr_prev=0 prev curr next
	# debug
	${DEBUG:-false} && set -x
	shift
	# code
	readarray -t args < <(echo "$@" | tr -s ', ' \\n | sort -un)
	for ((ind = 2; ind < ${#args[@]}; ind++)); do
		prev=${args[ind - 2]}
		curr=${args[ind - 1]}
		next=${args[ind]}
		next_curr=$((next - curr))
		curr_prev=$((curr - prev))
		if ((ind == 2)); then
			printf '%d' "$prev"
		elif ((next_curr >= 2)) && ((curr_prev < 2)); then
			printf -- '-%d,%d' "$curr" "$next"
		elif ((curr_prev > 1)) && ((next_curr > 1)); then
			printf ',%d' "$next"
		elif ((next >= max)); then
			printf -- '-\n'
			break
		elif ((ind + 1 == ${#args[@]})); then
			printf -- '-%d\n' "$next"
			break
		fi
	done

	# unset debug
	${DEBUG:-false} && set +x
	return 0
}
byte_mr()
{
	sed \
		-e 's/\([0-9][0-9]*\(\.[0-9]\+\)\?\)[kK]/\1*1000/g' \
		-e 's/\([0-9][0-9]*\(\.[0-9]\+\)\?\)[mM]/\1*1000000/g' \
		| bc \
		| sed \
			-e 's/\..*$//'
}
validate_limit()
{
	${DEBUG:-false} && set -x
	local range="$1" ret=0 each start end
	if ! [[ $range =~ ^[[:digit:],-]+$ ]]; then
		ret=1
	elif [[ $range =~ ^[[:digit:]]+-$ ]]; then
		ret=0
	else
		for each in $(echo "$range" | cut -d, -f1- --output-delimiter=' '); do
			if [[ $each =~ ^[[:digit:]]+-[[:digit:]]+$ ]]; then
				start=${each%%-*}
				end=${each#*-}
				if ((end <= start)); then
					((ret++))
				fi
			elif ! {
				[[ $each =~ ^[[:digit:]]+-$ ]] \
					|| [[ $each =~ ^[[:digit:]]+$ ]]
			}; then
				((ret++))
			fi
		done
	fi
	${DEBUG:-false} && set +x
	return "$ret"
}
num_unicode2ascii()
{
	sed "$(for n in "${langs[@]}"; do echo "y/$n/0123456789/;"; done)"
}
srand()
{
	python3 -c 'import numpy as np
from sys import argv
def random_spaced(low, high, delta, n, size=1):
	"""
	Choose n random values between low and high, with minimum spacing delta.
		If size is None, one sample is returned.
	Set size=m (an integer) to return m samples.
		The values in each sample returned by random_spaced are in increasing
	order.
	"""
	empty_space = high - low - (n-1)*delta
	if empty_space < 0:
		return [low, high - delta]
	if size is None:
		u = np.random.rand(n)
	else:
		u = np.random.rand(size, n)
		x = empty_space * np.sort(u, axis=-1)
	return low + x + delta * np.arange(n)
try:
		print(*(str(int(n)) for n in random_spaced(int(argv[1]),int(argv[2]),int(argv[3]),int(argv[4]))[0]),sep=" ")
except KeyboardInterrupt:
	pass' "$@"

}
anime_cover()
{
	local anime_cover_img
	anime_cover_img=$1
	#ext=${anime_cover_img##*.}
	if [ ! -e folder.jpg ]; then
		{
			curl --disable -kLsIXGET "$anime_cover_img" \
				&& wget --no-check-certificate -q "$anime_cover_img" -cO "cover.jpg"
		} &> /dev/null
		if ! grep -q cover.jpg .hidden &> /dev/null && [ -f cover.jpg ]; then
			echo cover.jpg >> .hidden
		fi
	fi
}
replace_invalid()
{
	local -a args
	args=(
		-e 's|<|＜|g'
		-e 's|>|＞|g'
		-e 's|:|꞉|g'
		-e 's|\"|＂|g'
		-e 's|/|⧸|g'
		-e 's|\\|⧹|g'
		-e 's|?|？|g'
		-e 's|\||ǀ|g'
		-e 's|\*|🞵|g'
	)
	if [[ $1 == dir ]]; then
		args+=(-e 's|\.$|.'$'\342\200\213|g')
	else
		args+=(-e 's| |-|g')
	fi
	sed "${args[@]}"
}

remote_exist()
{
	if echo "$@" | grep -q http; then
		if [[ $(curl --disable --referer "$1" -kLsIXGET "$1" | awk '/HTTP\// {print $2}' | tail -1) =~ 2[[:digit:]]. ]]; then
			return 0
		else
			return 1
		fi
	else
		return 2
	fi

}

if ${DEBUG:-false}; then
	vbar()
	{
		echo "$*"
	}
	start_spinner()
	{
		vbar "$@"
	}
	stop_spinner()
	{
		:
	}
fi
#end:code
